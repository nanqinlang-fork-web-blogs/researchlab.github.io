<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>朴实的一线攻城狮</title>
  <subtitle>十年磨一剑，一步一步脚踏实地的耕种</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.grdtechs.com/"/>
  <updated>2016-07-27T03:15:13.312Z</updated>
  <id>http://www.grdtechs.com/</id>
  
  <author>
    <name>Lee Hong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go http client/server 设置cookie小结</title>
    <link href="http://www.grdtechs.com/2016/07/10/go-setcookie/"/>
    <id>http://www.grdtechs.com/2016/07/10/go-setcookie/</id>
    <published>2016-07-10T16:51:56.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p><code>Go</code>web开发中，经常需要设置获取cookies, 不管是从client端设置获取还是server设置获取，其实都差不多，下面就总结一下常用的方法。<br><a id="more"></a></p>
<h2 id="golang_u4E2Dcookie__u8BE6_u7EC6_u5B9A_u4E49"><a href="#golang_u4E2Dcookie__u8BE6_u7EC6_u5B9A_u4E49" class="headerlink" title="golang中cookie 详细定义"></a>golang中cookie 详细定义</h2><p>golang 官方文档中对<code>Cookie</code>结构的定义<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Cookie <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name       <span class="typename">string</span></span><br><span class="line">    Value      <span class="typename">string</span></span><br><span class="line">    Path       <span class="typename">string</span></span><br><span class="line">    Domain     <span class="typename">string</span></span><br><span class="line">    Expires    time.Time</span><br><span class="line">    RawExpires <span class="typename">string</span></span><br><span class="line">    <span class="comment">// MaxAge=0表示未设置Max-Age属性</span></span><br><span class="line">    <span class="comment">// MaxAge&lt;0表示立刻删除该cookie，等价于"Max-Age: 0"</span></span><br><span class="line">    <span class="comment">// MaxAge&gt;0表示存在Max-Age属性，单位是秒</span></span><br><span class="line">    MaxAge   <span class="typename">int</span></span><br><span class="line">    Secure   <span class="typename">bool</span></span><br><span class="line">    HttpOnly <span class="typename">bool</span></span><br><span class="line">    Raw      <span class="typename">string</span></span><br><span class="line">    Unparsed []<span class="typename">string</span> <span class="comment">// 未解析的“属性-值”对的原始文本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Cookie</code>代表一个出现在<code>HTTP回复的头域</code>中<code>Set-Cookie头的值里</code>或者<code>HTTP请求的头域</code>中Cookie头的值里的HTTP cookie。</p>
<ul>
<li><p><code>Expires</code> – 过期时间。指定cookie的生命期。具体是值是过期日期。如果想让cookie的存在期限超过当前浏览器会话时间，就必须使用这个属性。当过了到期日期时，浏览器就可以删除cookie文件，没有任何影响。</p>
</li>
<li><p><code>Path</code> – 路径。指定与cookie关联的WEB页。值可以是一个目录，或者是一个路径。如果/head/index.html 建立了一个cookie，那么在/head/目录里的所有页面，以及该目录下面任何子目录里的页面都可以访问这个cookie。这就是说，在/head/stories/articles 里的任何页面都可以访问/head/index.html建立的cookie。但是，如果/zdnn/ 需要访问/head/index.html设置的cookes，该怎么办?这时，我们要把cookies的path属性设置成“/”。在指定路径的时候，凡是来自同一服务器，URL里有相同路径的所有WEB页面都可以共享cookies。现在看另一个例子：如果想让 /head/filters/ 和/head/stories/共享cookies，就要把path设成“/head”。</p>
</li>
<li><p><code>Domain</code> – 域。指定关联的WEB服务器或域。值是域名，比如goaler.com。这是对path路径属性的一个延伸。如果我们想让dev.mycompany.com 能够访问bbs.mycompany.com设置的cookies，该怎么办? 我们可以把domain属性设置成“mycompany.com”，并把path属性设置成“/”。FYI：不能把cookies域属性设置成与设置它的服务器的所在域不同的值。</p>
</li>
<li><p><code>Secure</code> – 安全。指定cookie的值通过网络如何在用户和WEB服务器之间传递。这个属性的值或者是“secure”，或者为空。缺省情况下，该属性为空，也就是使用不安全的HTTP连接传递数据。如果一个 cookie 标记为secure，那么，它与WEB服务器之间就通过HTTPS或者其它安全协议传递数据。不过，设置了secure属性不代表其他人不能看到你机器本地保存的cookie。换句话说，把cookie设置为secure，只保证cookie与WEB服务器之间的数据传输过程加密，而保存在本地的cookie文件并不加密。如果想让本地cookie也加密，得自己加密数据。当设置为true时，表示创建的 Cookie 会被以安全的形式向服务器传输，也就是只能在 HTTPS 连接中被浏览器传递到服务器端进行会话验证，如果是 HTTP 连接则不会传递该信息，所以不会被窃取到Cookie 的具体内容。</p>
</li>
<li><p><code>HttpOnly</code>属性,如果在Cookie中设置了”HttpOnly”属性，那么通过程序(JS脚本、Applet等)将无法读取到Cookie信息，这样能有效的防止XSS攻击。</p>
</li>
<li><p><code>secure</code>属性是防止信息在传递的过程中被监听捕获后信息泄漏，<code>HttpOnly</code>属性的目的是防止程序获取cookie后进行攻击。</p>
</li>
</ul>
<p><strong> 参考更多 </strong></p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/Cookie" target="_blank" rel="external">中文维基 - Cookie</a></li>
<li><a href="https://en.wikipedia.org/wiki/HTTP_cookie#Session_management" target="_blank" rel="external">英文维基 - Http-Cookie</a></li>
</ul>
<h2 id="client__u7AEF_u8BBE_u7F6Ecookie"><a href="#client__u7AEF_u8BBE_u7F6Ecookie" class="headerlink" title="client 端设置cookie"></a>client 端设置cookie</h2><p>客户端设置cookie,很简单<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client  set cookie</span></span><br><span class="line">cookie := http.Cookie&#123;Name: <span class="string">"clientcookieid"</span>, Value: <span class="string">"121"</span>, Expires: time.Now().Add(<span class="number">111</span> * time.Second)&#125;</span><br><span class="line">req.AddCookie(&amp;cookie)</span><br></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">req.AddCookie(&amp;http.Cookie&#123;</span><br><span class="line">	Name:    <span class="string">"clientcookieid2"</span>,</span><br><span class="line">	Value:   <span class="string">"id2"</span>,</span><br><span class="line">	Expires: time.Now().Add(<span class="number">111</span> * time.Second),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="server_u7AEF_u63A5_u6536cookie"><a href="#server_u7AEF_u63A5_u6536cookie" class="headerlink" title="server端接收cookie"></a>server端接收cookie</h2><p>后端接收cookie有两种方式,如果是指定cookie的名字，只要取得1个或少数几个cookie, 可以用如下方式获取<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">client_cookie, _ := r.Cookie(<span class="string">"clientcookieid"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%+v\n"</span>, client_cookie)</span><br><span class="line">fmt.Println(client_cookie.Name, clinet_cookie.Value) <span class="comment">// 通过点运算符获取client_cookie的属性</span></span><br></pre></td></tr></table></figure></p>
<p>如果指定了多个cookie值对，则可以通过迭代的方式访问<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> r.Cookies() &#123;</span><br><span class="line">	fmt.Printf(<span class="string">"%+v\n"</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="server_u7AEF_u8BBE_u7F6Ecookie"><a href="#server_u7AEF_u8BBE_u7F6Ecookie" class="headerlink" title="server端设置cookie"></a>server端设置cookie</h2><p>server端设置cookie 和client端设置cookie类似，不同的是 server端用的是<code>http.SetCookie</code>, 而client端用的是<code>req.AddCookie</code><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http.SetCookie(w, &amp;http.Cookie&#123;</span><br><span class="line">	Name:    <span class="string">"servercookie"</span>,</span><br><span class="line">	Value:   <span class="string">"servercookievalue"</span>,</span><br><span class="line">	Expires: time.Now().Add(<span class="number">111</span> * time.Second),</span><br><span class="line">&#125;)</span><br><span class="line">http.SetCookie(w, &amp;http.Cookie&#123;</span><br><span class="line">	Name:    <span class="string">"servercookie2"</span>,</span><br><span class="line">	Value:   <span class="string">"servercookievalue2"</span>,</span><br><span class="line">	Expires: time.Now().Add(<span class="number">111</span> * time.Second),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="client__u7AEF_u63A5_u6536cookie"><a href="#client__u7AEF_u63A5_u6536cookie" class="headerlink" title="client 端接收cookie"></a>client 端接收cookie</h2><p>golang client端接收cookie 只能通过迭代的方式获取<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> resp.Cookies() &#123;</span><br><span class="line">	fmt.Printf(<span class="string">"%+v\n"</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/researchlab/golearning/tree/master/setcookie" target="_blank" rel="external">完整示例代码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Go&lt;/code&gt;web开发中，经常需要设置获取cookies, 不管是从client端设置获取还是server设置获取，其实都差不多，下面就总结一下常用的方法。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://www.grdtechs.com/categories/golang/"/>
    
    
      <category term="golang" scheme="http://www.grdtechs.com/tags/golang/"/>
    
      <category term="net/http" scheme="http://www.grdtechs.com/tags/net-http/"/>
    
      <category term="setcookie" scheme="http://www.grdtechs.com/tags/setcookie/"/>
    
  </entry>
  
  <entry>
    <title>html 美化输出 json 字符串</title>
    <link href="http://www.grdtechs.com/2016/06/17/jsonfmt/"/>
    <id>http://www.grdtechs.com/2016/06/17/jsonfmt/</id>
    <published>2016-06-17T10:55:21.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p><code>json</code>字符串在html用js美化输出使用总结。<br><a id="more"></a></p>
<h2 id="JSON-stringify_28_29_u51FD_u6570_u539F_u578B"><a href="#JSON-stringify_28_29_u51FD_u6570_u539F_u578B" class="headerlink" title="JSON.stringify()函数原型"></a>JSON.stringify()函数原型</h2><p><strong>语法：</strong><br>　　<code>JSON.stringify(value [, replacer] [, space])</code></p>
<p><code>value</code>：是必选字段。就是你输入的对象，比如数组，类等。<br><code>replacer</code>：这个是可选的。它又分为2种方式，一种是数组，第二种是方法。<br>　　情况一：<code>replacer</code>为数组时，通过后面的实验可以知道，它是和第一个参数<code>value</code>有关系的。一般来说，系列化后的结果是通过键值对来进行表示的。 所以，如果此时第二个参数的值在第一个存在，那么就以第二个参数的值做<code>key</code>，第一个参数的值为<code>value</code>进行表示，如果不存在，就忽略。</p>
<p>　　情况二：<code>replacer</code>为方法时，那很简单，就是说把系列化后的每一个对象（记住是每一个）传进方法里面进行处理。 </p>
<p><code>space</code>：就是用什么来做分隔符的。<br>　　1）如果省略的话，那么显示出来的值就没有分隔符，直接输出来 。<br>　　2）如果是一个数字的话，那么它就定义缩进几个字符，当然如果大于10 ，则默认为10，因为最大值为10。<br>　　3）如果是一些转义字符，比如<code>\t</code>，表示回车，那么它每行一个回车。<br>　　4）如果仅仅是字符串，就在每行输出值的时候把这些字符串附加上去。当然，最大长度也是10个字符。 </p>
<h2 id="JSON-stringify_28_29__u5B9E_u4F8B"><a href="#JSON-stringify_28_29__u5B9E_u4F8B" class="headerlink" title="JSON.stringify() 实例"></a>JSON.stringify() 实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>html美化输出json字符串<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">'text/css'</span>&gt;</span><span class="css"></span><br><span class="line"><span class="tag">pre</span> <span class="rules">&#123;<span class="rule"><span class="attribute">outline</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#ccc</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">5px</span></span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">5px</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.string</span> <span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value"> green</span></span>; &#125;</span></span><br><span class="line"><span class="class">.number</span> <span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value"> darkorange</span></span>; &#125;</span></span><br><span class="line"><span class="class">.boolean</span> <span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value"> blue</span></span>; &#125;</span></span><br><span class="line"><span class="class">.null</span> <span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value"> magenta</span></span>; &#125;</span></span><br><span class="line"><span class="class">.key</span> <span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value"> red</span></span>; &#125;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">pre</span> <span class="attribute">id</span>=<span class="value">"output"</span>&gt;</span><span class="tag">&lt;/<span class="title">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">pre</span> <span class="attribute">id</span>=<span class="value">"output2"</span>&gt;</span><span class="tag">&lt;/<span class="title">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;a:<span class="number">1</span>, <span class="string">'b'</span>:<span class="string">'foo'</span>, c:[<span class="literal">false</span>,<span class="literal">null</span>, &#123;d:&#123;e:<span class="number">1.3e5</span>&#125;&#125;]&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 最简单的输出</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(obj, <span class="literal">undefined</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'output'</span>).innerHTML = str;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 带高亮的输出</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highLight</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line">			 json = json.replace(<span class="regexp">/&amp;/g</span>, <span class="string">'&amp;amp;'</span>).replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>).replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt;'</span>);</span><br><span class="line">			  <span class="keyword">return</span> json.replace(<span class="regexp">/("(\\u[a-zA-Z0-9]&#123;4&#125;|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match</span>) </span>&#123;</span><br><span class="line">				     <span class="keyword">var</span> cls = <span class="string">'number'</span>;</span><br><span class="line">				     <span class="keyword">if</span> (<span class="regexp">/^"/</span>.test(match)) &#123;</span><br><span class="line">				         <span class="keyword">if</span> (<span class="regexp">/:$/</span>.test(match)) &#123;</span><br><span class="line">				             cls = <span class="string">'key'</span>;</span><br><span class="line">				         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				             cls = <span class="string">'string'</span>;</span><br><span class="line">				         &#125;</span><br><span class="line">				     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/true|false/</span>.test(match)) &#123;</span><br><span class="line">				         cls = <span class="string">'boolean'</span>;</span><br><span class="line">				     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/null/</span>.test(match)) &#123;</span><br><span class="line">				         cls = <span class="string">'null'</span>;</span><br><span class="line">				     &#125;</span><br><span class="line">				     <span class="keyword">return</span> <span class="string">'&lt;span class="'</span> + cls + <span class="string">'"&gt;'</span> + match + <span class="string">'&lt;/span&gt;'</span>;</span><br><span class="line">				 &#125;);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">var</span> person = &#123;</span><br><span class="line">			 name: <span class="string">"Hello Kitty"</span>,</span><br><span class="line">			 sex: <span class="string">"男"</span>,</span><br><span class="line">			 age: <span class="number">20</span>,</span><br><span class="line">			 child: [</span><br><span class="line">			 	&#123;</span><br><span class="line">			 		name: <span class="string">"Hello"</span>,</span><br><span class="line">					sex: <span class="string">"男"</span>,</span><br><span class="line">					age: <span class="number">10</span>,</span><br><span class="line">					toy:[<span class="string">'a'</span>,<span class="string">'b'</span>]</span><br><span class="line">			 	&#125;,</span><br><span class="line">			 	&#123;</span><br><span class="line">			 		name: <span class="string">"Kitty"</span>,</span><br><span class="line">					sex: <span class="string">"女"</span>,</span><br><span class="line">					age: <span class="number">8</span>,</span><br><span class="line">					toy:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">			 	&#125;</span><br><span class="line">			 ]</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(person, <span class="literal">undefined</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="comment">//document.getElementById('output2').innerHTML = syntaxHighlight(str);</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'output2'</span>).innerHTML = highLight(str);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述示例的效果如图:</p>
<center><img src="/imgs/jsonfmt.png" alt="jsonformat"></center>

<p><a href="https://github.com/researchlab/CodeSnippets/blob/master/json.html" target="_blank" rel="external">详见github示例代码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;json&lt;/code&gt;字符串在html用js美化输出使用总结。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://www.grdtechs.com/categories/javascript/"/>
    
    
      <category term="html" scheme="http://www.grdtechs.com/tags/html/"/>
    
      <category term="json" scheme="http://www.grdtechs.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>golang 格式化时间总结</title>
    <link href="http://www.grdtechs.com/2016/06/14/go-time-summary/"/>
    <id>http://www.grdtechs.com/2016/06/14/go-time-summary/</id>
    <published>2016-06-14T14:05:28.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p><code>golang</code> 中经常需要格式化时间和日期来满足不同的业务需求,下面总结格式化时间日期中遇到的问题。<br><a id="more"></a></p>
<h2 id="golang_time_u5305__u65F6_u95F4_u65E5_u671F_u683C_u5F0F_u5316_u5B9A_u4E49"><a href="#golang_time_u5305__u65F6_u95F4_u65E5_u671F_u683C_u5F0F_u5316_u5B9A_u4E49" class="headerlink" title="golang time包 时间日期格式化定义"></a>golang time包 时间日期格式化定义</h2><p>go 的time package 提供了time.Format函数，用来对时间进行格式化输出;类似的还有time.Parse用来解析字符串类型的时间到time.Time。这是两个互逆的函数。</p>
<p><strong> 下面看<code>golang</code>中<code>time</code>包对于时间的详细定义 </strong></p>
<ul>
<li>月份 1,01,Jan,January</li>
<li>日　 2,02,_2</li>
<li>时　 3,03,15,PM,pm,AM,am</li>
<li>分　 4,04</li>
<li>秒　 5,05</li>
<li>年　 06,2006</li>
<li>时区 -07,-0700,Z0700,Z07:00,-07:00,MST</li>
<li>周几 Mon,Monday</li>
</ul>
<p><strong> 比如小时的表示(原定义是下午3时，也就是15时) </strong></p>
<ul>
<li>3 用12小时制表示，去掉前导0</li>
<li>03 用12小时制表示，保留前导0</li>
<li>15 用24小时制表示，保留前导0</li>
<li>03pm 用24小时制am/pm表示上下午表示，保留前导0</li>
<li>3pm 用24小时制am/pm表示上下午表示，去掉前导0</li>
</ul>
<p><strong> 又比如月份 </strong></p>
<ul>
<li>1 数字表示月份，去掉前导0</li>
<li>01 数字表示月份，保留前导0</li>
<li>Jan 缩写单词表示月份</li>
<li>January 全单词表示月份</li>
</ul>
<h2 id="u65F6_u95F4_u65E5_u671F_u683C_u5F0F_u5316"><a href="#u65F6_u95F4_u65E5_u671F_u683C_u5F0F_u5316" class="headerlink" title="时间日期格式化"></a>时间日期格式化</h2><ul>
<li>本地当期时间</li>
</ul>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(time.Now()) <span class="comment">//2016-07-14 14:27:28.214512532 +0800 CST</span></span><br></pre></td></tr></table></figure>
<ul>
<li>时间格式化</li>
</ul>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(time.Now().Format(<span class="string">"3:04:05.000 PM Mon Jan"</span>))            <span class="comment">// 2:27:05.702 PM Thu Jul</span></span><br><span class="line">fmt.Println(time.Now().Format(<span class="string">"2006-01-_2 3:04:05.000 PM Mon Jan"</span>)) <span class="comment">// 2016-07-14 2:54:11.442 PM Thu Jul</span></span><br><span class="line">fmt.Println(time.Now().Format(<span class="string">"2006-01-02 15:04:05"</span>))  <span class="comment">// 2016-07-14 14:54:11.442239513 +0800 CST</span></span><br></pre></td></tr></table></figure>
<ul>
<li>本地当前时间戳(10位)</li>
</ul>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(time.Now().Unix()) <span class="comment">//1468479251</span></span><br></pre></td></tr></table></figure>
<ul>
<li>本地当前时间戳(19位)</li>
</ul>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(time.Now().UnixNano()) <span class="comment">//1468480006774460462</span></span><br></pre></td></tr></table></figure>
<ul>
<li>时间戳转时间 </li>
</ul>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(time.Unix(<span class="number">1389058332</span>, <span class="number">0</span>).Format(<span class="string">"2006-01-02 15:04:05"</span>)) <span class="comment">//2014-01-07 09:32:12</span></span><br></pre></td></tr></table></figure>
<ul>
<li>时间转时间戳</li>
</ul>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(time.Date(<span class="number">2014</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">50</span>, <span class="number">4</span>, <span class="number">0</span>, time.Local).Unix())</span><br></pre></td></tr></table></figure>
<ul>
<li>时间转换为UTC时间和本地时间( UTC:零时区 +0000， China: 东八区 +0800)</li>
</ul>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">dateStr := <span class="string">"2016-07-14 14:24:51"</span> </span><br><span class="line">timestamp1, _ := time.Parse(<span class="string">"2006-01-02 15:04:05"</span>, dateStr)</span><br><span class="line">timestamp2, _ := time.ParseInLocation(<span class="string">"2006-01-02 15:04:05"</span>, dateStr, time.Local)</span><br><span class="line">fmt.Println(timestamp1, timestamp2)               <span class="comment">//2016-07-14 14:24:51 +0000 UTC 2016-07-14 14:24:51 +0800 CST </span></span><br><span class="line">fmt.Println(timestamp1.Unix(), timestamp2.Unix()) <span class="comment">//1468506291 1468477491 </span></span><br><span class="line"></span><br><span class="line">now := time.Now()                </span><br><span class="line">year, mon, day := now.UTC().Date()</span><br><span class="line">hour, min, sec := now.UTC().Clock()</span><br><span class="line">zone, _ := now.UTC().Zone()     </span><br><span class="line">fmt.Printf(<span class="string">"UTC 时间是 %d-%d-%d %02d:%02d:%02d %s\n"</span>,         </span><br><span class="line">    year, mon, day, hour, min, sec, zone) <span class="comment">// UTC 时间是 2016-7-14 07:06:46 UTC</span></span><br><span class="line">                                                           </span><br><span class="line">year, mon, day = now.Date()</span><br><span class="line">hour, min, sec = now.Clock()</span><br><span class="line">zone, _ = now.Zone()</span><br><span class="line">fmt.Printf(<span class="string">"本地时间是 %d-%d-%d %02d:%02d:%02d %s\n"</span>,</span><br><span class="line">    year, mon, day, hour, min, sec, zone) <span class="comment">// 本地时间是 2016-7-14 15:06:46 CST</span></span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;golang&lt;/code&gt; 中经常需要格式化时间和日期来满足不同的业务需求,下面总结格式化时间日期中遇到的问题。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://www.grdtechs.com/categories/golang/"/>
    
    
      <category term="golang" scheme="http://www.grdtechs.com/tags/golang/"/>
    
      <category term="time" scheme="http://www.grdtechs.com/tags/time/"/>
    
  </entry>
  
  <entry>
    <title>Go Vendoring Tools 使用总结</title>
    <link href="http://www.grdtechs.com/2016/05/24/comparison-of-Go-Vendoring-Tools/"/>
    <id>http://www.grdtechs.com/2016/05/24/comparison-of-Go-Vendoring-Tools/</id>
    <published>2016-05-24T14:03:36.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>golang1.5版本开始支持第三方包到依赖管理,当多个项目在同一个<code>GOPATH</code>下，每个项目包含到第三方包通过<code>go get</code>命令都会<code>get</code>到<code>GOPATH</code>下到<code>src</code>目录中，而不是各个项目的文件夹中，这就导致第三方包的不同版本不能同时被<code>GOPATH</code>下到多个项目使用，从<code>golang</code>需要设置<code>GOPATH</code>来看,<code>golang</code>其实把每个项目当作一个个独立的第三包来看待。<br><a id="more"></a><br>关于<code>golang</code>包管理工具的topic, 在<code>golang</code>的官方wiki要有一篇总结对比的文章:<a href="https://github.com/golang/go/wiki/PackageManagementTools" target="_blank" rel="external">PackageManagementTools</a>。下面主要就项目中用过的<code>godep</code>,<code>govendor</code>,<code>glide</code>做一个简要的对比分析。</p>
<h2 id="godep"><a href="#godep" class="headerlink" title="godep"></a>godep</h2><p><a href="https://github.com/tools/godep" target="_blank" rel="external">godep</a> helps build packages reproducibly by fixing their dependencies.</p>
<p><strong>前置条件</strong></p>
<ul>
<li>项目处在<code>GOPATH</code>下</li>
<li>项目能被<code>go install</code>通过</li>
<li>项目能被<code>go test</code>通过</li>
</ul>
<p><strong>包初始化管理</strong><br>在项目根目录下执行<code>godep save</code>命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ godep save</span><br></pre></td></tr></table></figure></p>
<p>会在项目根目录下生成两个文件夹: </p>
<p><code>Godeps</code>目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">➜  Godeps tree</span><br><span class="line">.</span><br><span class="line">├── Godeps.json</span><br><span class="line">└── Readme</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> directories, <span class="number">2</span> files</span><br><span class="line">➜  Godeps cat Godeps.json </span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">"ImportPath"</span>: <span class="string">"yaml"</span>,</span><br><span class="line">	<span class="string">"GoVersion"</span>: <span class="string">"go1.6"</span>,</span><br><span class="line">	<span class="string">"GodepVersion"</span>: <span class="string">"v70"</span>,</span><br><span class="line">	<span class="string">"Packages"</span>: [</span><br><span class="line">		<span class="string">"./..."</span></span><br><span class="line">	],</span><br><span class="line">	<span class="string">"Deps"</span>: [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">"ImportPath"</span>: <span class="string">"gopkg.in/yaml.v2"</span>,</span><br><span class="line">			<span class="string">"Rev"</span>: <span class="string">"a83829b6f1293c91addabc89d0571c246397bbf4"</span></span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>vendor</code>目录:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">➜  vendor tree</span><br><span class="line">.</span><br><span class="line">└── gopkg.in</span><br><span class="line">    └── yaml.v2</span><br><span class="line">        ├── apic.go</span><br><span class="line">        ├── decode.go</span><br><span class="line">        ├── emitterc.go</span><br><span class="line">        ├── encode.go</span><br><span class="line">        ├── LICENSE</span><br><span class="line">        ├── LICENSE.libyaml</span><br><span class="line">        ├── parserc.go</span><br><span class="line">        ├── readerc.go</span><br><span class="line">        ├── README.md</span><br><span class="line">        ├── resolve.go</span><br><span class="line">        ├── scannerc.go</span><br><span class="line">        ├── sorter.go</span><br><span class="line">        ├── writerc.go</span><br><span class="line">        ├── yaml.go</span><br><span class="line">        ├── yamlh.go</span><br><span class="line">        └── yamlprivateh.go</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> directories, <span class="number">16</span> files</span><br></pre></td></tr></table></figure>
<p>可以看到，<code>godep</code>把第三包的版本依赖信息记录在<code>Godeps.json</code>下，并且把第三包完整拷贝一份到<code>vendor</code>下面。通过对<code>Godeps.json</code>文件进行版本管理即可以管理整个项目的第三方包依赖信息。</p>
<p><strong>添加新包</strong><br>方法一：</p>
<p>go get 把新增的第三方包get到<code>GOPATH</code>的<code>src</code>目录下，然后再执行<code>godep save</code></p>
<p>方法二：</p>
<p>godep get <url> 同样是把第三方包get到<code>GOPATH</code>的<code>src</code>下，然后再执行<code>godep save</code></url></p>
<p>可以看到<code>godep</code>只是把第三方包进行单独到依赖管理，而新增到第三包还是会被get到<code>GOPATH</code>中, 如果多个项目用同一个第三包的不同版本时，显然不能满足。</p>
<p><strong>更新包</strong><br><code>godep</code>通过<code>godep update</code> 更新制定的第三包以及<code>golang</code>的版本。</p>
<h2 id="govendor"><a href="#govendor" class="headerlink" title="govendor"></a>govendor</h2><p><a href="https://github.com/kardianos/govendor" target="_blank" rel="external">govendor</a> Uses the go1.5+ vendor folder. Multiple workflows supported, single tool.</p>
<p><strong>Quick Start</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Setup your project.</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"my project in GOPATH"</span></span><br><span class="line">govendor init</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add existing GOPATH files to vendor.</span></span><br><span class="line">govendor add +external</span><br><span class="line"></span><br><span class="line"><span class="comment"># View your work.</span></span><br><span class="line">govendor list</span><br><span class="line"></span><br><span class="line"><span class="comment"># Look at what is using a package</span></span><br><span class="line">govendor list -v fmt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify a specific version or revision to fetch</span></span><br><span class="line">govendor fetch golang.org/x/net/context@a4bbce9fcae005b22ae5443f6af064d80a6f5a55</span><br><span class="line">govendor fetch golang.org/x/net/context@v1   <span class="comment"># Get latest v1.*.* tag or branch.</span></span><br><span class="line">govendor fetch golang.org/x/net/context@=v1  <span class="comment"># Get the tag or branch named "v1".</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update a package to latest, given any prior version constraint</span></span><br><span class="line">govendor fetch golang.org/x/net/context</span><br></pre></td></tr></table></figure>
<p><strong>Sub-commands</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">init     Create the <span class="string">"vendor"</span> folder and the <span class="string">"vendor.json"</span> file.</span><br><span class="line">    list     List and filter existing dependencies and packages.</span><br><span class="line">    add      Add packages from <span class="variable">$GOPATH</span>.</span><br><span class="line">    update   Update packages from <span class="variable">$GOPATH</span>.</span><br><span class="line">    remove   Remove packages from the vendor folder.</span><br><span class="line">    status   Lists any packages missing, out-of-date, or modified locally.</span><br><span class="line">    fetch    Add new or update vendor folder packages from remote repository.</span><br><span class="line">    sync     Pull packages into vendor folder from remote repository with revisions</span><br><span class="line">                 from vendor.json file.</span><br><span class="line">    migrate  Move packages from a legacy tool to the vendor folder with metadata.</span><br><span class="line">    get      Like <span class="string">"go get"</span> but copies dependencies into a <span class="string">"vendor"</span> folder.</span><br><span class="line">    license  List discovered licenses <span class="keyword">for</span> the given status or import paths.</span><br><span class="line">    shell    Run a <span class="string">"shell"</span> to make multiple sub-commands more efficent <span class="keyword">for</span> large</span><br><span class="line">                 projects.</span><br><span class="line"></span><br><span class="line">    go tool commands that are wrapped:</span><br><span class="line">      `+&lt;status&gt;` package selection may be used with them</span><br><span class="line">    fmt, build, install, clean, <span class="built_in">test</span>, vet, generate</span><br></pre></td></tr></table></figure>
<p><strong>Status</strong> </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+<span class="built_in">local</span>    (l) packages <span class="keyword">in</span> your project</span><br><span class="line">    +external (e) referenced packages <span class="keyword">in</span> GOPATH but not <span class="keyword">in</span> current project</span><br><span class="line">    +vendor   (v) packages <span class="keyword">in</span> the vendor folder</span><br><span class="line">    +std      (s) packages <span class="keyword">in</span> the standard library</span><br><span class="line"></span><br><span class="line">    +unused   (u) packages <span class="keyword">in</span> the vendor folder, but unused</span><br><span class="line">    +missing  (m) referenced packages but not found</span><br><span class="line"></span><br><span class="line">    +program  (p) package is a main package</span><br><span class="line"></span><br><span class="line">    +outside  +external +missing</span><br><span class="line">    +all      +all packages</span><br></pre></td></tr></table></figure>
<p>可以看到<code>govendor init</code>之后会在根目录下生成一个<code>vendor</code>文件夹 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">➜  yaml tree <span class="operator">-d</span></span><br><span class="line">.</span><br><span class="line">└── vendor</span><br><span class="line">    ├── github.com</span><br><span class="line">    │   └── cihub</span><br><span class="line">    │       └── seelog</span><br><span class="line">    └── gopkg.in</span><br><span class="line">        └── yaml.v2</span><br><span class="line"></span><br><span class="line"><span class="number">6</span> directories</span><br><span class="line">➜  yaml cat vendor/vendor.json </span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">"comment"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ignore"</span>: <span class="string">"test"</span>,</span><br><span class="line">	<span class="string">"package"</span>: [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">"checksumSHA1"</span>: <span class="string">"Nc93Ubautl47L3RP6x4lTY+ud68="</span>,</span><br><span class="line">			<span class="string">"path"</span>: <span class="string">"github.com/cihub/seelog"</span>,</span><br><span class="line">			<span class="string">"revision"</span>: <span class="string">"cedd97ac8c6c2ec413a97864185f9510fb1775cc"</span>,</span><br><span class="line">			<span class="string">"revisionTime"</span>: <span class="string">"2016-05-20T13:10:56Z"</span></span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">"checksumSHA1"</span>: <span class="string">"+OgOXBoiQ+X+C2dsAeiOHwBIEH0="</span>,</span><br><span class="line">			<span class="string">"path"</span>: <span class="string">"gopkg.in/yaml.v2"</span>,</span><br><span class="line">			<span class="string">"revision"</span>: <span class="string">"a83829b6f1293c91addabc89d0571c246397bbf4"</span>,</span><br><span class="line">			<span class="string">"revisionTime"</span>: <span class="string">"2016-03-01T20:40:22Z"</span></span><br><span class="line">		&#125;</span><br><span class="line">	],</span><br><span class="line">	<span class="string">"rootPath"</span>: <span class="string">"yaml"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用<code>govendor fetch &lt;url1&gt; &lt;url2&gt;</code>新增的第三方包直接被get到根目录的<code>vendor</code>文件夹下,不会与其它的项目混用第三方包，完美避免多个项目同用同一个第三方包的不同版本问题。</p>
<p>只需要对<code>vendor/vendor.json</code>进行版本控制，即可对第三包依赖关系进行控制。</p>
<h2 id="glide"><a href="#glide" class="headerlink" title="glide"></a>glide</h2><p><a href="https://github.com/Masterminds/glide" target="_blank" rel="external">Glide</a> Vendor Package Management for Golang.</p>
<p><strong>Usage</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">➜  yaml glide --help</span><br><span class="line">USAGE:</span><br><span class="line">   glide [global options] <span class="built_in">command</span> [<span class="built_in">command</span> options] [arguments...]</span><br><span class="line"></span><br><span class="line">	create, init	Initialize a new project, creating a glide.yaml file</span><br><span class="line">    get			Install one or more packages into `vendor/` and add dependency to glide.yaml.</span><br><span class="line">    remove, rm		Remove a package from the glide.yaml file, and regenerate the lock file.</span><br><span class="line">    import		Import files from other dependency management systems.</span><br><span class="line">    name		Print the name of this project.</span><br><span class="line">    novendor, nv	List all non-vendor paths <span class="keyword">in</span> a directory.</span><br><span class="line">    rebuild		Rebuild (<span class="string">'go build'</span>) the dependencies</span><br><span class="line">    install, i		Install a project<span class="string">'s dependencies</span><br><span class="line">    update, up		Update a project'</span>s dependencies</span><br><span class="line">    tree		Tree prints the dependencies of this project as a tree.</span><br><span class="line">    list		List prints all dependencies that the present code references.</span><br><span class="line">    info		Info prints information about this project</span><br><span class="line">    about		Learn about Glide</span><br><span class="line"></span><br><span class="line">GLOBAL OPTIONS:</span><br><span class="line">   --yaml, -y <span class="string">"glide.yaml"</span>	Set a YAML configuration file.</span><br><span class="line">   --quiet, -q			Quiet (no info or debug messages)</span><br><span class="line">   --debug			Print Debug messages (verbose)</span><br><span class="line">   --home <span class="string">"/home/dev/.glide"</span>	The location of Glide files [<span class="variable">$GLIDE_HOME</span>]</span><br><span class="line">   --no-color			Turn off colored output <span class="keyword">for</span> <span class="built_in">log</span> messages</span><br><span class="line">   --help, -h			show <span class="built_in">help</span></span><br><span class="line">   --version, -v		<span class="built_in">print</span> the version</span><br></pre></td></tr></table></figure>
<p><code>glide</code>    通过<code>glide create</code>或<code>glide init</code>命令初始化第三方包管理，会在项目根目录下生成一个<code>glide.yaml</code>，这个文件记录用到的第三方包的依赖关系，支持编辑修改。<br><code>glide</code>通过<code>glide install</code>, 会把所有缺少的第三方包都下载到<code>vendor</code>文件夹下，并且会在<code>glide.yaml</code>中添加所有依赖的第三方包名称，在<code>glide.lock</code>文件中记录具体的版本管理信息。</p>
<p><strong>glide install</strong></p>
<p>When you want to install the specific versions from the glide.lock file use glide install.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ glide install</span><br></pre></td></tr></table></figure>
<p>This will read the <code>glide.lock</code> file and install the commit id specific versions there.</p>
<p>When the glide.lock file doesn’t tie to the <code>glide.yaml</code> file, such as there being a change, it will provide a warning. Running glide up will recreate the <code>glide.lock</code> file when updating the dependency tree.</p>
<p>If no glide.lock file is present glide install will perform an update and generate a lock file.</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><ul>
<li><code>godep</code>,<code>govendor</code>,<code>glide</code> 都可以很好的进行包管理。<code>govendor</code>,<code>glide</code>提供的可操作命令更丰富。</li>
<li><code>godep</code> 会在根目录生成<code>Godeps</code>和<code>vendor</code>两个文件夹; <code>govendor</code>把所有信息都生成在<code>vendor</code>目录下; <code>glide</code> 会在根目录下生成<code>glide.yaml</code>, <code>glide.lock</code>文件及<code>vendor</code>目录; 从<code>简洁度</code>和<code>尽量不污染项目</code>来看，<code>govendor</code>最优，<code>glide</code>次之。</li>
<li><p><code>godep</code>, <code>govendor</code>, <code>glide</code> 都提供get 第三方包的命令，但是 <code>glide</code>的<code>glide install</code> 最为方便， 并且直接把第三方包get到本项目的vendor目录下，并且<code>glide</code>提供的<code>便捷</code>命令也丰富。</p>
</li>
<li><p><strong> 在生产项目中推荐使用<code>govendor</code>, 更简洁; 在试验项目中推荐试用<code>glide</code>, 更方便。</strong></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;golang1.5版本开始支持第三方包到依赖管理,当多个项目在同一个&lt;code&gt;GOPATH&lt;/code&gt;下，每个项目包含到第三方包通过&lt;code&gt;go get&lt;/code&gt;命令都会&lt;code&gt;get&lt;/code&gt;到&lt;code&gt;GOPATH&lt;/code&gt;下到&lt;code&gt;src&lt;/code&gt;目录中，而不是各个项目的文件夹中，这就导致第三方包的不同版本不能同时被&lt;code&gt;GOPATH&lt;/code&gt;下到多个项目使用，从&lt;code&gt;golang&lt;/code&gt;需要设置&lt;code&gt;GOPATH&lt;/code&gt;来看,&lt;code&gt;golang&lt;/code&gt;其实把每个项目当作一个个独立的第三包来看待。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://www.grdtechs.com/categories/golang/"/>
    
    
      <category term="glide" scheme="http://www.grdtechs.com/tags/glide/"/>
    
      <category term="godep" scheme="http://www.grdtechs.com/tags/godep/"/>
    
      <category term="govendor" scheme="http://www.grdtechs.com/tags/govendor/"/>
    
      <category term="vendoring" scheme="http://www.grdtechs.com/tags/vendoring/"/>
    
  </entry>
  
  <entry>
    <title>使用Travis CI自动构建Hexo静态博客</title>
    <link href="http://www.grdtechs.com/2016/05/08/travis-ci-deploy-hexo-blog/"/>
    <id>http://www.grdtechs.com/2016/05/08/travis-ci-deploy-hexo-blog/</id>
    <published>2016-05-08T21:48:40.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>目前，自动化构建、持续集成的理念在整个计算行业非常的流行，大家更愿意去使用自动化代替手动，从而提高效率。<code>Travis CI</code>就是一个在线的、分布式的持续集成服务，用来构建及测试在GitHub托管的代码。利用Travis CI 会在每一次push后生成一个虚拟机来执行事先安排好的自动构建任务，从来进行发布。本文就要用<code>Travis CI</code>来自动构建<code>Hexo</code>博客。<br><a id="more"></a></p>
<h2 id="u5B89_u88C5Hexo"><a href="#u5B89_u88C5Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ul>
<li>安装cnpm</li>
</ul>
<blockquote>
<p>注意：npm因为qiang的原因，经常会出问题，我换成了taobao的cmpn镜像，taobao的cnpm镜像这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>
</blockquote>
<p>安装命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>
<ul>
<li>安装Hexo</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>启动本地的服务器看下是否安装成功<code>hexo s</code>，浏览器打开<a href="http://localhost:4000。" target="_blank" rel="external">http://localhost:4000。</a></p>
<p>到目前为止，Hexo安装完毕，如何配置及发布到<code>github</code>上托管，请参考<a href="/./hexo-blog-1.md">用Hexo+github搭建本站</a>。本文重点记录如何用<code>Travis CI</code> 自动构建<code>Hexo</code>博客。</p>
<h2 id="u90E8_u7F72Travis_CI"><a href="#u90E8_u7F72Travis_CI" class="headerlink" title="部署Travis CI"></a>部署Travis CI</h2><p>目前，自动化构建、持续集成的理念在整个计算行业非常的流行，大家更愿意去使用自动化代替手动，从而提高效率。</p>
<ul>
<li>持续集成的概念</li>
</ul>
<p>持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，每人每天可能集成一次，甚至多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。</p>
<p>自动构建工具则是持续集成的一种出色实践。代码提交后，由软件自动完成代码的测试、构建，并将过程中状态与构建物产出才是持续集成的意义。</p>
<ul>
<li>为什么使用</li>
</ul>
<p>Travis CI本身已经是很好的自动构建的工具，而这里使用的原因，本质上是因为Hexo本身并不能进行多人合作。Hexo的hexo generate和hexo deploy会自动渲染并提交到GitHub上，所以当你从别的电脑上clone的时候，clone下来的是渲染好的html的文章。就算我在两个电脑上同时搭建了环境，但是每次渲染的时候只会渲染本地的markdown文章，依然不能进行同步。有些人选择了使用百度云进行同步，每次写之前下载下来并覆盖，就能进行同步。不否认，这个方法对于一个人写博客，在工作和家的电脑还算是比较方便的，因为始终是一个人进行操作。而我们的博客是多人共同写的，所以说会存在各种冲突问题，于是想到了用Travis CI。</p>
<center><img src="/imgs/travis-hexo-flowing.png" alt="travis-hexo-flowing"></center>

<p>从上述流程中分析下思路：<br>前提：我们在之前博客搭建的repo下面，新建一个blog的分支，这个分支用来进行环境代码的备份，并且配置出<code>.travis.yml</code>进行自动化构建。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User - push -&gt; branch blog</span><br></pre></td></tr></table></figure>
<p>将代码push到在GitHub上的博客中的blog分支。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dev repo - sync -&gt; Travis CI</span><br></pre></td></tr></table></figure>
<p>在branch blog中配置<code>.travis.yml</code>文件，在Travis CI中开启branch blog的同步开关，并启用<code>Build only if .travis.yml is present</code>项，这样能在repo中有多个branch时，让Travis CI只构建放置了<code>.travis.yml</code>文件的<code>branch</code>。</p>
<ul>
<li>Travis CI - build and push -&gt; Pages repo</li>
</ul>
<p><code>Travis CI</code> 的自动化构建完全依靠唯一的<code>.travis.yml</code>脚本文件。需要在此文件中添加构建环境、构建Hexo、生成博客及后续push到Pages repo的全部脚本。</p>
<ul>
<li>生成SSH Key<br>要做到<code>Travis CI</code>向<code>Pages repo</code>自动推送就必须用到<code>Github SSH Key</code>，这样做的目的是免去Hexo部署时候输入密码的步骤。生成SSH Key的操作参照GitHub的官网即可：<a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="external">Github SSH Key</a>。<br>这样会得到<code>id_rsa.pub</code>和<code>id_rsa</code>两个秘钥，我们将<code>id_rsa.pub</code>添加到了<code>github</code>，下面要加密<code>id_rsa</code>这个私钥并且上传到<code>Travis</code>。</li>
</ul>
<p><strong> 注意：</strong> <font color="red">这个SSH key不应该是你账号的全局SSH Key，这样Travis CI就获得了你所有代码库的提交权限。仅仅只需要把SSH Key添加到当前repo的setting中的key下面即可。</font></p>
<p>即将<code>id_rsa.pub</code>秘钥添加到当前项目<code>researchlab.github.io</code>下<code>Settings</code>下的<code>Deploy keys</code>中，如图:</p>
<center><img src="/imgs/deploy_keys.png" alt="deploy_keys"></center>

<blockquote>
<p>记得要将 <code>Allow write access</code> 的选项选上，这样 Travis CI 才能获得 push 代码的权限。 </p>
</blockquote>
<ul>
<li>Travis CI 环境<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cp ~/.ssh/id_rsa / <span class="comment">#将上一步得到的`id_rsa`复制到当前blog根目录下</span></span><br><span class="line">$ vim .travis.yml <span class="comment">#创建.travis.yml</span></span><br><span class="line">$ gem install travis <span class="comment">#安装Travis CI</span></span><br><span class="line">$ travis login --auto <span class="comment">#登录Travis CI，需要输入GitHub的账号密码</span></span><br><span class="line">$ travis encrypt-file ssh_key --add <span class="comment">#加密私钥并上传至Travis 注意这里的 ssh_key 要换成上面私钥的名称，即: travis encrypt-file id_rsa</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>注意</strong>:<br>gem 的官方源经常被qiang, 所以要注意更换gem sources,<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gem sources <span class="comment">#查看原有的官方源</span></span><br><span class="line">gem <span class="built_in">source</span> -r https://rubygems.org/ <span class="comment"># 删除 rubygems 官方源</span></span><br><span class="line">gem <span class="built_in">source</span> <span class="operator">-a</span> http://mirrors.aliyun.com/rubygems/   <span class="comment"># 添加aliyun 源</span></span><br><span class="line">gem install travis --no-rdoc --no-ri --verbose  <span class="comment"># 安装Travis</span></span><br></pre></td></tr></table></figure></p>
<p><strong>生成提示</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">encrypting id_rsa <span class="keyword">for</span> researchlab/researchlab.github.io</span><br><span class="line">storing result as id_rsa.enc</span><br><span class="line">storing secure env variables <span class="keyword">for</span> decryption</span><br><span class="line"></span><br><span class="line">Make sure to add id_rsa.enc to the git repository.</span><br><span class="line">Make sure not to add id_rsa to the git repository.</span><br><span class="line">Commit all changes to your .travis.yml.</span><br></pre></td></tr></table></figure>
<p>生成加密过得新秘钥<code>id_rsa.enc</code>, 并自动将branch blog中git的信息及解密秘钥的相关信息添加到<code>.travis.yml</code>中。<strong> 然后手动删除私钥文件<code>id_rsa</code>， 以保证代码仓库的安全。</strong></p>
<ul>
<li>SSH的设置<br>在当前目录下新建文件ssh_config，内容为</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  User git</span><br><span class="line">  StrictHostKeyChecking no</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line">  IdentitiesOnly yes</span><br></pre></td></tr></table></figure>
<p>修改.travis.yml中的命令，指定openssl解密后的生成位置，xxxxxxxxxx部分就是你的解密参数，不要去改动它。<br>即将<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- openssl aes-<span class="number">256</span>-cbc -K <span class="variable">$encrypted_xxxxxxxxxx_key</span> -iv <span class="variable">$encrypted_xxxxxxxxxx_iv</span></span><br><span class="line">	-in id_rsa.enc -out id_rsa <span class="operator">-d</span></span><br></pre></td></tr></table></figure></p>
<p>修改为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- openssl aes-<span class="number">256</span>-cbc -K <span class="variable">$encrypted_xxxxxxxxxx_key</span> -iv <span class="variable">$encrypted_xxxxxxxxxx_iv</span></span><br><span class="line">  -in id_rsa.enc -out ~/.ssh/id_rsa <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改目录权限<br>紧接着在.travis.yml中修改目录权限</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- chmod <span class="number">600</span> ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<ul>
<li>将密钥加入系统<br>紧接着在.travis.yml中将密钥加入系统</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">eval</span> $(ssh-agent)</span><br><span class="line">- ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<ul>
<li>修改git信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- cp ssh_config ~/.ssh/config</span><br><span class="line">- git config --global user.name <span class="string">"username"</span></span><br><span class="line">- git config --global user.email username@example.com</span><br></pre></td></tr></table></figure>
<ul>
<li>添加分支信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - blog</span><br></pre></td></tr></table></figure>
<ul>
<li>配置Hexo</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">install:</span><br><span class="line">- npm install hexo-cli -g</span><br><span class="line">- npm install hexo --save</span><br><span class="line">- npm install</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">- hexo clean</span><br><span class="line">- hexo g </span><br><span class="line">- hexo d</span><br></pre></td></tr></table></figure>
<p>这样就完成了<code>.travis.yml</code>的设置，这里是我的源文件<code>.travis.yml</code>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: node_js&#10;node_js:&#10;- &#39;0.12&#39;&#10;branches:&#10;  only:&#10;  - blog&#10;before_install:&#10;- openssl aes-256-cbc -K $encrypted_xxxxxxxxxx_key-iv $encrypted_xxxxxxxxxx_iv&#10;  -in id_rsa.enc -out ~/.ssh/id_rsa -d&#10;- chmod 600 ~/.ssh/id_rsa&#10;- eval $(ssh-agent)&#10;- ssh-add ~/.ssh/id_rsa&#10;- cp ssh_config ~/.ssh/config&#10;- git config --global user.name &#34;researchlab&#34;&#10;- git config --global user.email leehongitrd@163.com &#10;- git clone -b master git@github.com:researchlab/researchlab.github.io.git deploy_git&#10;install:&#10;- npm install hexo-cli -g&#10;- npm install&#10;- npm install hexo-generator-feed --save&#10;- npm install hexo-deployer-git --save&#10;script:&#10;- hexo clean&#10;- hexo g&#10;- hexo d</span><br></pre></td></tr></table></figure>
<p>这个时候应该将其push到blog分支,然后就可以了。</p>
<h2 id="u9047_u5230Authentication_failed"><a href="#u9047_u5230Authentication_failed" class="headerlink" title="遇到Authentication failed"></a>遇到Authentication failed</h2><p>提交之后，发现<code>Travis-ci</code> 每次到<code>hexo d</code> 这一步时就报错了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">remote: Invalid username or password.</span><br><span class="line">fatal: Authentication failed <span class="keyword">for</span> <span class="string">'https://github.com/researchlab/researchlab.github.io.git/'</span></span><br><span class="line">FATAL Something<span class="string">'s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: remote: Invalid username or password.</span><br><span class="line">fatal: Authentication failed for '</span>https://github.com/researchlab/researchlab.github.io.git/<span class="string">'</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (/home/travis/build/researchlab/researchlab.github.io/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:37:17)</span><br><span class="line">    at ChildProcess.emit (events.js:110:17)</span><br><span class="line">    at maybeClose (child_process.js:1019:16)</span><br><span class="line">    at Process.ChildProcess._handle.onexit (child_process.js:1091:5)</span><br><span class="line">FATAL remote: Invalid username or password.</span><br><span class="line">fatal: Authentication failed for '</span>https://github.com/researchlab/researchlab.github.io.git/<span class="string">'</span><br><span class="line">Error: remote: Invalid username or password.</span><br><span class="line">fatal: Authentication failed for '</span>https://github.com/researchlab/researchlab.github.io.git/<span class="string">'</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (/home/travis/build/researchlab/researchlab.github.io/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:37:17)</span><br><span class="line">    at ChildProcess.emit (events.js:110:17)</span><br><span class="line">    at maybeClose (child_process.js:1019:16)</span><br><span class="line">    at Process.ChildProcess._handle.onexit (child_process.js:1091:5)</span><br><span class="line">The command "hexo d" exited with 2.</span><br><span class="line">cache.2</span><br><span class="line">store build cache</span><br><span class="line">0.00s</span><br><span class="line">2.99schanges detected, packing new archive</span><br><span class="line">FAILED: tar -Pzcf /home/travis/.casher/push.tgz </span><br><span class="line">tar: Cowardly refusing to create an empty archive</span><br><span class="line">Try `tar --help'</span> or `tar --usage<span class="string">' for more information.</span><br><span class="line">uploading archive</span><br><span class="line">failed to upload cache</span><br><span class="line">curl: Can'</span>t open <span class="string">'/home/travis/.casher/push.tgz'</span>!</span><br><span class="line">curl: try <span class="string">'curl --help'</span> or <span class="string">'curl --manual'</span> <span class="keyword">for</span> more information</span><br><span class="line">Done. Your build exited with <span class="number">1</span>.</span><br></pre></td></tr></table></figure>
<p>这是因为hexo 根目录下的 <code>_config.yml</code>中配置问题导致的：<br>把如下配置:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Deployment&#10;## Docs: https://hexo.io/docs/deployment.html&#10;deploy:&#10;  type: git&#10;  repository: https://github.com/researchlab/researchlab.github.io.git&#10;  branch: master</span><br></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Deployment&#10;## Docs: https://hexo.io/docs/deployment.html&#10;deploy:&#10;  type: git&#10;  repository: git@github.com:researchlab/researchlab.github.io.git&#10;  branch: master</span><br></pre></td></tr></table></figure>
<p>问题即解决！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;目前，自动化构建、持续集成的理念在整个计算行业非常的流行，大家更愿意去使用自动化代替手动，从而提高效率。&lt;code&gt;Travis CI&lt;/code&gt;就是一个在线的、分布式的持续集成服务，用来构建及测试在GitHub托管的代码。利用Travis CI 会在每一次push后生成一个虚拟机来执行事先安排好的自动构建任务，从来进行发布。本文就要用&lt;code&gt;Travis CI&lt;/code&gt;来自动构建&lt;code&gt;Hexo&lt;/code&gt;博客。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.grdtechs.com/categories/Hexo/"/>
    
    
      <category term="Blog" scheme="http://www.grdtechs.com/tags/Blog/"/>
    
      <category term="Hexo" scheme="http://www.grdtechs.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>gin中使用设置cookie过期时间总结</title>
    <link href="http://www.grdtechs.com/2016/03/29/gin-setcookie/"/>
    <id>http://www.grdtechs.com/2016/03/29/gin-setcookie/</id>
    <published>2016-03-29T01:48:56.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>可以操作<code>Cookie</code>的<code>Http</code>头有两个:<code>Set-Cookie</code>和<code>Cookie</code>。<code>Set-Cookie</code>由服务器发送，它包含在响应请求的头部中。它用于在客户端创建一个<code>Cookie</code>。<code>Cookie</code>头由客户端发送，包含在<code>HTTP</code>请求的头部中。<br><a id="more"></a></p>
<font color="red"><strong>注意：<br>1.只有cookie的domain和path与请求的URL匹配才会发送这个cookie;<br>2.客户端发送cookie信息给服务器只发送键-值对到服务器，cookie的属性是不会发送给服务器的。</strong></font>

<h2 id="u8BD5_u9A8C_u9700_u6C42"><a href="#u8BD5_u9A8C_u9700_u6C42" class="headerlink" title="试验需求"></a>试验需求</h2><p>1.服务器给客户端设置cookie，并设置过期时间，客户端每次请求服务器时如果cookie没有过期，则服务器将cookie相应的value 加1并重设cookie, 如果cookie 过期，则重新设置cookie让value 从0开始计数。</p>
<h2 id="u8BD5_u9A8C_u4EE3_u7801"><a href="#u8BD5_u9A8C_u4EE3_u7801" class="headerlink" title="试验代码"></a>试验代码</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">	<span class="string">"strconv"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.Use(Counter()) <span class="comment">//这个是每个请求都会执行Counter()这个方法，</span></span><br><span class="line"></span><br><span class="line">	r.GET(<span class="string">"/counter"</span>, <span class="keyword">func</span>(c *gin.Context) &#123;</span><br><span class="line">		<span class="keyword">if</span> cookie, err := c.Request.Cookie(<span class="string">"counter"</span>); err == <span class="constant">nil</span> &#123;</span><br><span class="line">			c.String(http.StatusOK, cookie.Expires.String())</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			http.SetCookie(c.Writer, &amp;http.Cookie&#123;</span><br><span class="line">				Name:    <span class="string">"counter"</span>,</span><br><span class="line">				Value:   <span class="string">""</span>,</span><br><span class="line">				Expires: time.Now().Add(<span class="number">10</span> * time.Second),</span><br><span class="line">			&#125;)</span><br><span class="line">			c.String(http.StatusOK, <span class="string">"SetCookie ok"</span>)</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	fmt.Println(<span class="string">"server start from 8010"</span>)</span><br><span class="line">	r.Run(<span class="string">":8010"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> Counter() gin.HandlerFunc &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">func</span>(c *gin.Context) &#123;</span><br><span class="line">		<span class="keyword">if</span> cookie, err := c.Request.Cookie(<span class="string">"counter"</span>); err == <span class="constant">nil</span> &#123;</span><br><span class="line">			value := cookie.Value</span><br><span class="line">			<span class="keyword">if</span> <span class="built_in">len</span>(value) == <span class="number">0</span> &#123;</span><br><span class="line">				cookie.Value = <span class="string">"0"</span></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> v, err := strconv.Atoi(value); err == <span class="constant">nil</span> &#123;</span><br><span class="line">					i := v + <span class="number">1</span></span><br><span class="line">					cookie.Value = fmt.Sprintf(<span class="string">"%d"</span>, i)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			http.SetCookie(c.Writer, cookie)</span><br><span class="line">			<span class="comment">//before request</span></span><br><span class="line">			c.Next()</span><br><span class="line">			<span class="comment">//after request</span></span><br><span class="line">			c.String(http.StatusOK, <span class="string">" counter:"</span>+cookie.Value)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u4EE3_u7801_u5206_u6790"><a href="#u4EE3_u7801_u5206_u6790" class="headerlink" title="代码分析"></a>代码分析</h2><p>上述代码中<code>r.Use(Counter())</code>表示客户端每次发送一个请求给服务器，都会执行<code>Counter()</code>这个函数。比如客户端发送一个<code>http://localhost:8010/counter</code>的请求给服务器，则具体的处理流程为：先执行<code>Counter()</code>函数中的<code>c.Next()</code>前面的代码，当执行到<code>c.Next()</code>时， 先去执行<code>r.GET(&quot;/counter&quot;,func(c *gin.Context) {xxx}</code>中<code>xxx</code>程序体，当<code>xxx</code>程序体执行完之后，再执行<code>Counter()</code>函数中<code>c.Next()</code>之后的程序体，然后整个请求执行完毕。</p>
<p>回到上面的试验需求，第一次请求时没有cookie，此时服务器设置cookie并设置过期时间，第二次请求时如果还没有过期则在Counter中就能查到cookie,此时通过<code>Counter()</code>重新设置cookie, 但是注意：这里设置的cookie，因为Name与之前的cookie是一样的，所以此次设置的cookie的属性会覆盖之前的cookie的属性，因为此次只是改变cookie的value，而没有设置cookie的属性，所以此次设置cookie没有过期时间可言了。所以上述的试验需求是不合理的。或者说可以通过<code>redis</code>的操作去实现，但是不能仅靠设置<code>cookie</code>来实现这个需求。</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p><strong>服务器发送cookie给客户端</strong><br> 从服务器端，发送cookie给客户端，是对应的Set-Cookie。包括了对应的cookie的名称，值，以及各个属性。<br> 例如：<br>Set-Cookie: lu=Rg3vHJZnehYLjVg7qi3bZjzg; Expires=Tue, 15 Jan 2013 21:47:38 GMT; Path=/; Domain=.169it.com; HttpOnly<br>Set-Cookie: made_write_conn=1295214458; Path=/; Domain=.169it.com<br>Set-Cookie: reg_fb_gate=deleted; Expires=Thu, 01 Jan 1970 00:00:01 GMT; Path=/; Domain=.169it.com; HttpOnly</p>
<p><strong>从客户端把cookie发送到服务器</strong><br> 从客户端发送cookie给服务器的时候，是不发送cookie的各个属性的，而只是发送对应的名称和值。<br> 例如：<br>GET /spec.html HTTP/1.1<br>Host: www.example.org<br>Cookie: name=value; name2=value2<br>Accept: <em>/</em>  </p>
<font color="red">除了name=value对以外，我们还可以设置Cookie其他属性以支持更丰富的Cookie需求，<strong>这些属性通常是浏览器用来判断如何对待cookie，何时删除、屏蔽或者如何发送name-value对给Server。也就是说无论我们设置了某个cookie的多少属性，这些Cookie属性是不会被浏览器发送回给Server的。包括设置的过期时间也不会发送到服务器端</strong></font>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;可以操作&lt;code&gt;Cookie&lt;/code&gt;的&lt;code&gt;Http&lt;/code&gt;头有两个:&lt;code&gt;Set-Cookie&lt;/code&gt;和&lt;code&gt;Cookie&lt;/code&gt;。&lt;code&gt;Set-Cookie&lt;/code&gt;由服务器发送，它包含在响应请求的头部中。它用于在客户端创建一个&lt;code&gt;Cookie&lt;/code&gt;。&lt;code&gt;Cookie&lt;/code&gt;头由客户端发送，包含在&lt;code&gt;HTTP&lt;/code&gt;请求的头部中。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://www.grdtechs.com/categories/golang/"/>
    
    
      <category term="gin" scheme="http://www.grdtechs.com/tags/gin/"/>
    
      <category term="golang" scheme="http://www.grdtechs.com/tags/golang/"/>
    
      <category term="setcookie" scheme="http://www.grdtechs.com/tags/setcookie/"/>
    
  </entry>
  
  <entry>
    <title>golang类型转换(指定精度/四舍五入)</title>
    <link href="http://www.grdtechs.com/2016/03/24/go-type-convert/"/>
    <id>http://www.grdtechs.com/2016/03/24/go-type-convert/</id>
    <published>2016-03-24T02:06:54.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p><code>Go</code>的数据类型很多都需要显示转换才能使用,比如<code>string</code>转<code>float64</code>指定精度等。转换中常用到的第三方包为<code>strconv</code>和<code>math</code>包。<br><a id="more"></a></p>
<h2 id="u6574_u578B_u8F6C_u5B57_u7B26_u4E32"><a href="#u6574_u578B_u8F6C_u5B57_u7B26_u4E32" class="headerlink" title="整型转字符串"></a>整型转字符串</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strconv.Itoa(i) <span class="comment">//方法1</span></span><br><span class="line">strconv.FormatInt(<span class="typename">int64</span>(i),<span class="number">10</span>) <span class="comment">//方法2</span></span><br></pre></td></tr></table></figure>
<h2 id="u5B57_u7B26_u4E32_u8F6C_u6574_u578B"><a href="#u5B57_u7B26_u4E32_u8F6C_u6574_u578B" class="headerlink" title="字符串转整型"></a>字符串转整型</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strconv.Atoi(s) <span class="comment">//方法1</span></span><br><span class="line">strconv.ParseInt(s,<span class="number">10</span>,<span class="number">0</span>) <span class="comment">//方法2</span></span><br></pre></td></tr></table></figure>
<h2 id="bytes_u8F6Cfloat64"><a href="#bytes_u8F6Cfloat64" class="headerlink" title="bytes转float64"></a>bytes转float64</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> bytesToFloat64(bytes []<span class="typename">byte</span>) <span class="typename">float64</span> &#123;</span><br><span class="line">	bits := binary.LittleEndian.Uint64(bytes)</span><br><span class="line">	<span class="keyword">return</span> math.Float64frombits(bits)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="float64_u8F6Cbytes"><a href="#float64_u8F6Cbytes" class="headerlink" title="float64转bytes"></a>float64转bytes</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> float64ToBytes(input <span class="typename">float64</span>) []<span class="typename">byte</span> &#123;</span><br><span class="line">	bits := math.Float64bits(input)</span><br><span class="line">	bytes := <span class="built_in">make</span>([]<span class="typename">byte</span>,<span class="number">8</span>) <span class="comment">//这里表示[]uint8, 所以用了 8</span></span><br><span class="line">	binary.LittleEndian.PutUint64(bytes,bits)</span><br><span class="line">	<span class="keyword">return</span> bytes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="float64_u8F6Cstring"><a href="#float64_u8F6Cstring" class="headerlink" title="float64转string"></a>float64转string</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> FloatToStr(num <span class="typename">float64</span>, floatPartLen <span class="typename">int</span>) <span class="typename">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> strconv.FormatFloat(num,<span class="string">'f'</span>,floatPartLen,<span class="number">64</span>) <span class="comment">//这里64改为32，则表示float32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="string_u8F6Cfloat64"><a href="#string_u8F6Cfloat64" class="headerlink" title="string转float64"></a>string转float64</h2><p><code>string</code>转<code>float64</code> 这里有两种方法，都支持指定精度。<strong> 注意：所有数字要在表现层显示最好转换为字符串传送给表现层，如果用于后端计算则转换为数字即可。比如：数字2.10 如果用保持5位数字精度显示： 那么 数字2.10 显示为：2.1, 而将2.10转换为字符串同时保持5位精度，则显示为: 2.10000。但是它们都是转换为了5位精度的，只是显示的时候，数字2.10000 直接显示为2.1了， 所以要显示精度则转换为字符串，要用于计算则转换为数字。</strong></p>
<p>方法1： 只支持指定精度<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> strToFloat64(str <span class="typename">string</span>, <span class="built_in">len</span> <span class="typename">int</span>) <span class="typename">float64</span> &#123;</span><br><span class="line">	lenstr := <span class="string">"%."</span> + strconv.Itoa(<span class="built_in">len</span>) + <span class="string">"f"</span></span><br><span class="line">	value,_ := strconv.ParseFloat(str,<span class="number">64</span>)</span><br><span class="line">	nstr := fmt.Sprintf(lenstr,value)</span><br><span class="line">	val,_ := strconv.ParseFloat(nstr,<span class="number">64</span>)</span><br><span class="line">	<span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>方法2：支持指定精度，支持是否四舍五入<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> strToFloat64Round(str <span class="typename">string</span>, prec <span class="typename">int</span>, round <span class="typename">bool</span>) <span class="typename">float64</span> &#123;</span><br><span class="line">	f,_ := strconv.ParseFloat(str,<span class="number">64</span>)</span><br><span class="line">	<span class="keyword">return</span> Precision(f,prec,round)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> Precision(f <span class="typename">float64</span>, prec <span class="typename">int</span>, round <span class="typename">bool</span>) <span class="typename">float64</span> &#123;</span><br><span class="line">	pow10_n := math.Pow10(prec)</span><br><span class="line">	<span class="keyword">if</span> round &#123;</span><br><span class="line">		<span class="keyword">return</span> math.Trunc(f + <span class="number">0.5</span>/pow10_n)*pow10_n) / pow10_n	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> math.Trunc((f)*pow10_n) / pow10_n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>具体请参考[<a href="https://github.com/researchlab/golearning/blob/master/base/convert.go" target="_blank" rel="external">示例代码</a>]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Go&lt;/code&gt;的数据类型很多都需要显示转换才能使用,比如&lt;code&gt;string&lt;/code&gt;转&lt;code&gt;float64&lt;/code&gt;指定精度等。转换中常用到的第三方包为&lt;code&gt;strconv&lt;/code&gt;和&lt;code&gt;math&lt;/code&gt;包。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://www.grdtechs.com/categories/golang/"/>
    
    
      <category term="golang" scheme="http://www.grdtechs.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang 设计模式之observer使用总结</title>
    <link href="http://www.grdtechs.com/2016/02/26/observer-pattern-in-go-md/"/>
    <id>http://www.grdtechs.com/2016/02/26/observer-pattern-in-go-md/</id>
    <published>2016-02-26T00:40:11.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>观察者(<code>Observer</code>)设计模式定义了对象间的一种一对多的依赖关系，以便一个对象的状态发生变化时，所有依赖于它的对象都得到通知并自动刷新。观察者模式将观察者和被观察的对象分离开,体现了面向对象设计中一个对象只做一件事情的原则，提高了应用程序的可维护性和重用性。<br><a id="more"></a></p>
<h2 id="u5B9E_u73B0_u89C2_u5BDF_u8005_u6A21_u5F0F"><a href="#u5B9E_u73B0_u89C2_u5BDF_u8005_u6A21_u5F0F" class="headerlink" title="实现观察者模式"></a>实现观察者模式</h2><p>观察者模式有很多实现方式，从根本上说，该模式必须包含两个角色：观察者(Observer)和被观察对象(Subject)。</p>
<p><center><img src="/imgs/observer_pattern.jpg" alt="observer_pattern"></center></p>
<ul>
<li><p>观察者<br>观察者（<code>Observer</code>）将自己注册到被观察对象（<code>Subject</code>）中，被观察对象将观察者存放在一个容器（<code>Container</code>）里。</p>
</li>
<li><p>被观察<br>被观察对象(<code>Subject</code>)发生了某种变化，从容器中得到所有注册过的观察者，将变化通知观察者(<code>notifyObservers</code>)。</p>
</li>
<li><p>撤销观察<br>观察者告诉被观察者要撤销观察，被观察者从容器中将观察者去除。<br><strong>观察者将自己注册到被观察者的容器中时，被观察者不应该过问观察者的具体类型，而是应该使用观察者的接口。</strong>这样的优点是：假定程序中还有别的观察者，那么只要这个观察者也是相同的接口实现即可。一个被观察者可以对应多个观察者，当被观察者发生变化的时候，它可以将消息一一通知给所有的观察者。基于接口，而不是具体的实现——这一点为程序提供了更大的灵活性。<br>下面通过构建一个股民(<code>Observer</code>)和他们关注的某支具体股票(<code>Subject</code>)案例分析,<br>首先观察者(<code>Observer</code>)要能注册/注销到某个被观察者(<code>Subject</code>)中，同时被观察者(<code>Subject</code>)发送变化时要能够通知到依赖它的观察者(<code>Observer</code>),由此我们需要声明一个被观察者(<code>Subject</code>)的接口：</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// subject被观察者接口</span></span><br><span class="line"><span class="keyword">type</span> Subject <span class="keyword">interface</span> &#123;</span><br><span class="line">	Attach(Observer)</span><br><span class="line">	Detach(Observer)</span><br><span class="line">	Notify()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>遵循被观察者不应该过问观察者的具体类型，而是应该使用观察者的接口的原则，当被观察者(<code>Subject</code>)因自身改变通知观察者(<code>Observer</code>)改变时，应提供一个观察者(<code>Observer</code>)接口供被观察者(<code>Subject</code>)调用:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// observer观察者</span></span><br><span class="line"><span class="keyword">type</span> Observer <span class="keyword">interface</span> &#123;</span><br><span class="line">	Update(Subject, <span class="keyword">interface</span>&#123;&#125;) <span class="comment">//更新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接口设计好之后，就需要通过具体的对象来实现这些接口，在这个案例中假定股民关注的是中国石油这只股票，那么股票就是观察者(<code>Observer</code>),而中国石油股票则是被观察者(<code>Subject</code>),具体结构如下：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体observer观察者</span></span><br><span class="line"><span class="keyword">type</span> Investors <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">/*投资人*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体subject被观察者</span></span><br><span class="line"><span class="keyword">type</span> ChinaPetroleum <span class="keyword">struct</span> &#123;</span><br><span class="line">	oblist []Observer <span class="comment">//注册者链表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;观察者(&lt;code&gt;Observer&lt;/code&gt;)设计模式定义了对象间的一种一对多的依赖关系，以便一个对象的状态发生变化时，所有依赖于它的对象都得到通知并自动刷新。观察者模式将观察者和被观察的对象分离开,体现了面向对象设计中一个对象只做一件事情的原则，提高了应用程序的可维护性和重用性。&lt;br&gt;
    
    </summary>
    
      <category term="go-pattern" scheme="http://www.grdtechs.com/categories/go-pattern/"/>
    
    
      <category term="golang" scheme="http://www.grdtechs.com/tags/golang/"/>
    
      <category term="observer" scheme="http://www.grdtechs.com/tags/observer/"/>
    
  </entry>
  
  <entry>
    <title>golang 设计模式之singleton使用总结</title>
    <link href="http://www.grdtechs.com/2016/02/25/singleton-pattern-in-go/"/>
    <id>http://www.grdtechs.com/2016/02/25/singleton-pattern-in-go/</id>
    <published>2016-02-25T17:01:43.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p><code>golang</code> 1.5版本之后默认设置<code>GOMAXPROCS</code>值为当前计算机真实核心数，使得<code>goroutines</code>从默认的<code>单线程内并发执行</code>变成了默认的（真实核心数支持的）的<code>多线程内并行</code>执行。多线程并行执行<code>goroutines</code>需要考虑并行执行过程中引入的<code>线程安全问题</code>。<br><a id="more"></a></p>
<h2 id="u5355_u7EBF_u7A0Bsingleton_u6A21_u578B"><a href="#u5355_u7EBF_u7A0Bsingleton_u6A21_u578B" class="headerlink" title="单线程singleton模型"></a>单线程singleton模型</h2><p>单例模式定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点。先摘取一个在实际工作项目中碰到的singleton模型代码:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> singleton <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance *singleton</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> GetInstance() *singleton &#123;</span><br><span class="line">	<span class="keyword">if</span> instance == <span class="constant">nil</span> &#123;</span><br><span class="line">       instance = &amp;singleton&#123;&#125;   <span class="comment">// 没有考虑线程安全 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面的<code>singleton</code>设计代码在见过的几个<code>golang</code>项目中都是这么写的，如果这段代码放在<code>golang</code>1.5版本之前默认的单线程场景下运行显然是没什么问题的。<code>golang</code>1.5版本之后默认是启动多核并行执行<code>goroutines</code>的，如果上述代码放在<code>golang</code>1.5版本之后，如果程序开启n个<code>goroutines</code>初始化一个<code>singleton</code>对象, 显然会初始化成功最少一个最多n个<code>singleton</code>对象，从而会存在潜在的多个单例实例对象了，也就不可能保证这个<code>singleton</code>对象全局唯一性了，那后继采用<code>singleton</code>对象进行全局唯一性操作时势必会造成数据不一致的问题。如果场景中但个<code>goroutines</code>执行时间短的话，会使得调试更难。</p>
<h2 id="u91C7_u7528_u4E92_u65A5_u9501_u673A_u5236"><a href="#u91C7_u7528_u4E92_u65A5_u9501_u673A_u5236" class="headerlink" title="采用互斥锁机制"></a>采用互斥锁机制</h2><p>面对上述线程安全问题，一般会考虑到用锁机制(<code>Mutex</code>)来解决因线程安全引入的数据不一致问题，采用锁机制如：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mu Sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> GetInstance() *singleton &#123;</span><br><span class="line">    mu.Lock()                    <span class="comment">// singleton实例对象操作之后，锁就是多余的了 </span></span><br><span class="line">    <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> instance == <span class="constant">nil</span> &#123;</span><br><span class="line">        instance = &amp;singleton&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上述代码可以看到，引入锁机制<code>Sync.Mutex</code>后，能够保证多线程并行执行<code>goroutines</code>创建的<code>singleton</code>实例对象是唯一的，但是当这个<code>singleton</code>实例对象被初始化创建之后，再次并行来创建<code>singleton</code>实例对象时，其实已经不再需要锁了，因为已经存在了一个创建好的<code>singleton</code>实例对象，所以直接返回即可;但是因为锁机制的存在，使得再次创建<code>singleton</code>实例对象时，还是需要先获取锁，然后在判断处理，多线程执行中这种锁竞争使得多线程的并行执行变成了多线程的串行执行，这显然会使程序丧失并行执行带来的性能提升。在一个高度并行的程序中，这样显示会是抑制程序性能提升的一个瓶颈。</p>
<h2 id="u91C7_u7528_u53CC_u91CD_u68C0_u67E5_u9501_u673A_u5236"><a href="#u91C7_u7528_u53CC_u91CD_u68C0_u67E5_u9501_u673A_u5236" class="headerlink" title="采用双重检查锁机制"></a>采用双重检查锁机制</h2><p>在<code>C++</code>等编程语言中，为了同时保证最小锁和线程安全通常采用的方法是<code>双重检查锁(Check-Lock-Check)</code>机制，也表述为<code>DCL(Double Check Lock)</code>。<code>双重检查锁</code>机制的伪代码一般是下面的这种形式:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> check() &#123;</span><br><span class="line">    lock() &#123;</span><br><span class="line">       <span class="keyword">if</span> check() &#123;</span><br><span class="line">           <span class="comment">// 锁安全代码 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其实对这个<code>singleton</code>实例对象来说，只有在第一次创建实例的时候才需要同步，所以为了减少同步，先check一下，判断<code>singleton</code>实例对象是否为空，如果为空，表示是第一使用这个<code>singleton</code>实例对象，那就锁住它，new一个<code>singleton</code>实例，下次另一个线程来<code>GetInstance</code>的时候，看到这个<code>singleton</code>实例对象不为空，就表示已经创建过一个实例了，那就可以直接得到这个实例，避免再次锁。这是第一个 check的作用。 </p>
<p>第二个check是解决锁竞争情况下的问题，假设现在两个线程来请求<code>GetInstance</code>，A、B线程同时发现<code>singleton</code>实例对象为空，因为我们在第一次check方法上没有加锁，然后A线程率先获得锁，进入同步代码块，new了一个<code>singleton</code>实例对象，之后释放锁，接着B线程获得了这个锁，发现<code>singleton</code>实例对象已经被创建了，就直接释放锁，退出同步代码块。所以这就是<code>Check-Lock-Check</code>; 将上面的<code>singleton</code>实例用<code>Check-Lock-Check</code>机制实现如：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> GetInstance() *singleton &#123;</span><br><span class="line">    <span class="keyword">if</span> instance == <span class="constant">nil</span> &#123; </span><br><span class="line">        mu.Lock()</span><br><span class="line">        <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> instance == <span class="constant">nil</span> &#123;</span><br><span class="line">	            instance = &amp;singleton&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过上面的<code>Check-Lock-Check</code>机制,的确可以解决锁竟争的问题，但是这种方法不管是否<code>singleton</code>实例对象是否已创建，每次都要执行两次check才是一个完整的判断，那有没有方法使得只要一次check就可以完成对<code>singleton</code>实例对象是否存在的检查呢？ 有！通过<code>golang</code>的<code>sync/atomic</code>包提供的原子性操作可以更高效的完成这个检查，改进代码如：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"sync"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sync/atomic"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> initialized <span class="typename">uint32</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> GetInstance() *singleton &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> atomic.LoadUInt32(&amp;initialized) == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> instance</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> initialized == <span class="number">0</span> &#123;</span><br><span class="line">         instance = &amp;singleton&#123;&#125;</span><br><span class="line">         atomic.StoreUint32(&amp;initialized, <span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>改进之后的代码通过设置一个标志操作，使得<code>singleton</code>实例对象创建之后，直接通过原子操作读取标志字段的值判断返回已经存在的实例，连锁操作及其后面的代码都略过了。</p>
<h2 id="u91C7_u7528atomic_u8FDB_u4E00_u6B65_u7B80_u5316"><a href="#u91C7_u7528atomic_u8FDB_u4E00_u6B65_u7B80_u5316" class="headerlink" title="采用atomic进一步简化"></a>采用atomic进一步简化</h2><p>上面通过<code>Check-Lock-Check</code>机制改进之后似乎没有什么可做的了，先不急，来看看<code>golang</code>原生标准包<code>sync</code>包中对<code>Once</code>实现的源码：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Once is an object that will perform exactly one action.</span></span><br><span class="line"><span class="keyword">type</span> Once <span class="keyword">struct</span> &#123;</span><br><span class="line">	m    Mutex</span><br><span class="line">	done <span class="typename">uint32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do calls the function f if and only if Do is being called for the</span></span><br><span class="line"><span class="comment">// first time for this instance of Once. In other words, given</span></span><br><span class="line"><span class="comment">//	var once Once</span></span><br><span class="line"><span class="comment">// if once.Do(f) is called multiple times, only the first call will invoke f,</span></span><br><span class="line"><span class="comment">// even if f has a different value in each invocation.  A new instance of</span></span><br><span class="line"><span class="comment">// Once is required for each function to execute.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Do is intended for initialization that must be run exactly once.  Since f</span></span><br><span class="line"><span class="comment">// is niladic, it may be necessary to use a function literal to capture the</span></span><br><span class="line"><span class="comment">// arguments to a function to be invoked by Do:</span></span><br><span class="line"><span class="comment">//	config.once.Do(func() &#123; config.init(filename) &#125;)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Because no call to Do returns until the one call to f returns, if f causes</span></span><br><span class="line"><span class="comment">// Do to be called, it will deadlock.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If f panics, Do considers it to have returned; future calls of Do return</span></span><br><span class="line"><span class="comment">// without calling f.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">func</span> (o *Once) Do(f <span class="keyword">func</span>()) &#123;</span><br><span class="line">	<span class="keyword">if</span> atomic.LoadUint32(&amp;o.done) == <span class="number">1</span> &#123; <span class="comment">// &lt;-- Check</span></span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Slow-path.</span></span><br><span class="line">	o.m.Lock()                           <span class="comment">// &lt;-- Lock</span></span><br><span class="line">	<span class="keyword">defer</span> o.m.Unlock()</span><br><span class="line">	<span class="keyword">if</span> o.done == <span class="number">0</span> &#123;                     <span class="comment">// &lt;-- Check</span></span><br><span class="line">		<span class="keyword">defer</span> atomic.StoreUint32(&amp;o.done, <span class="number">1</span>)</span><br><span class="line">		f()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到我们之前其实是借鉴了<code>golang</code>原生标准包<code>sync</code>中对<code>Once</code>实现对源码，那既然标准包中已经实现了这个<code>Check-Lock-Check</code>机制，那我们直接调用<code>sync</code>包提供<code>once.Do()</code>方法对某个方法只进行一次性调用：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">once.Do(<span class="keyword">func</span>() &#123;</span><br><span class="line">	 <span class="comment">// perform safe initialization here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>那么下面是根据<code>sync</code>包提供的<code>sync.Once</code>改进的获取<code>singleton</code>实例对象最终优化版本:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> singleton <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance *singleton</span><br><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> GetInstance() *singleton &#123;</span><br><span class="line">    once.Do(<span class="keyword">func</span>() &#123;</span><br><span class="line">        instance = &amp;singleton&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因此使用<code>sync</code>包提供的<code>sync.Once</code>实现获取<code>singleton</code>实例对象可以说是最安全有效又简洁的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;golang&lt;/code&gt; 1.5版本之后默认设置&lt;code&gt;GOMAXPROCS&lt;/code&gt;值为当前计算机真实核心数，使得&lt;code&gt;goroutines&lt;/code&gt;从默认的&lt;code&gt;单线程内并发执行&lt;/code&gt;变成了默认的（真实核心数支持的）的&lt;code&gt;多线程内并行&lt;/code&gt;执行。多线程并行执行&lt;code&gt;goroutines&lt;/code&gt;需要考虑并行执行过程中引入的&lt;code&gt;线程安全问题&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="go-pattern" scheme="http://www.grdtechs.com/categories/go-pattern/"/>
    
    
      <category term="golang" scheme="http://www.grdtechs.com/tags/golang/"/>
    
      <category term="singleton" scheme="http://www.grdtechs.com/tags/singleton/"/>
    
  </entry>
  
  <entry>
    <title>golang 并发安全性案例分析</title>
    <link href="http://www.grdtechs.com/2016/02/24/go-concurrency-security/"/>
    <id>http://www.grdtechs.com/2016/02/24/go-concurrency-security/</id>
    <published>2016-02-24T21:47:55.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p><code>golang</code> 在1.5版本之前默认只使用一个核心来跑所有的<code>goroutines</code>,即<code>GOMAXPROCS</code>默认设置为1, ,即是串行执行<code>goroutines</code>,在1.5版本后，<code>GOMAXPROCS</code>默认设置为当前计算机真实的核心线程数，即是在并行执行<code>goroutines</code>。<br><a id="more"></a></p>
<h2 id="u5E76_u884C_u6267_u884C_u5B89_u5168_u6027_u6848_u4F8B_u5206_u6790"><a href="#u5E76_u884C_u6267_u884C_u5B89_u5168_u6027_u6848_u4F8B_u5206_u6790" class="headerlink" title="并行执行安全性案例分析"></a>并行执行安全性案例分析</h2><p>利用计算机多核处理的特性，并行执行能成倍的提高程序的性能,但同时也带入了数据安全性问题，下面看一个在线银行转账的案例:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">		Cash <span class="typename">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (u *User) sendCash(to *User, amount <span class="typename">int</span>) <span class="typename">bool</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> u.Cash &lt; amount &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="constant">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/* 设置延迟Sleep，当多个goroutines并行执行时,便于进行数据安全分析 */</span></span><br><span class="line">	time.Sleep(<span class="number">500</span> * time.Millisecond)</span><br><span class="line">	u.Cash = u.Cash - amount</span><br><span class="line">	to.Cash = to.Cash + amount</span><br><span class="line">	<span class="keyword">return</span> <span class="constant">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	me := User&#123;Cash: <span class="number">500</span>&#125;</span><br><span class="line">	you := User&#123;Cash: <span class="number">500</span>&#125;</span><br><span class="line">	http.HandleFunc(<span class="string">"/"</span>, <span class="keyword">func</span>(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">		me.sendCash(&amp;you, <span class="number">50</span>) <span class="comment">//转账</span></span><br><span class="line">		fmt.Fprintf(w, <span class="string">"I have $%d\n"</span>, me.Cash)</span><br><span class="line">		fmt.Fprintf(w, <span class="string">"You have $%d\n"</span>, you.Cash)</span><br><span class="line">		fmt.Fprintf(w, <span class="string">"Total transferred: $%d\n"</span>, (you.Cash - <span class="number">500</span>))</span><br><span class="line">	&#125;)</span><br><span class="line">	http.ListenAndServe(<span class="string">":8080"</span>, <span class="constant">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这是一个通用的Go Web应用，定义User数据结构，sendCash是在两个User之间转账的服务，这里使用的是net/http 包，我们创建了一个简单的Http服务器，然后将请求路由到转账50元的sendCash方法，在正常操作下，代码会如我们预料一样运行，每次转移50美金，一旦一个用户的账户余额达到0美金，就不能再进行转出钞票了，因为没有钱了，但是，如果我们很快地发送很多请求，这个程序会继续转出很多钱，导致账户余额为负数。</p>
<p>这是课本上经常谈到的竞争情况race condition，在这个代码中，账户余额的检查是与从账户中取钱操作分离的，我们假想一下，如果一个请求刚刚完成账户余额检查，但是还没有取钱，也就是没有减少账户余额数值；而另外一个请求线程同时也检查账户余额，发现账户余额还没有剩为零（结果两个请求都一起取钱，导致账户余额为负数），这是典型的”check-then-act”竞争情况。这是很普遍存在的 并发 bug。</p>
<h2 id="u7528_u9501_u89E3_u51B3_u7ADF_u6001_u6570_u636E_u5B89_u5168_u95EE_u9898"><a href="#u7528_u9501_u89E3_u51B3_u7ADF_u6001_u6570_u636E_u5B89_u5168_u95EE_u9898" class="headerlink" title="用锁解决竟态数据安全问题"></a>用锁解决竟态数据安全问题</h2><p>那么我们如何解决呢？我们肯定不能移除检查操作，而是确保检查和取钱两个动作之间没有任何其他操作发生，其他语言是使用锁，当账户进行更新时，锁住禁止同时有其他线程操作，确保一次只有一个进程操作，也就是排斥锁Mutex。,下面用<code>golang</code>自带的<code>sync</code>包实现对转账判断及数据操作过程的加锁：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">		Cash <span class="typename">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> transferLock *sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (u *User) sendCash(to *User, amount <span class="typename">int</span>) <span class="typename">bool</span> &#123;</span><br><span class="line"></span><br><span class="line">	transferLock.Lock() <span class="comment">//对转账操作进行加锁</span></span><br><span class="line">	<span class="keyword">defer</span> transferLock.Unlock() <span class="comment">//转账结束后解锁释放资源</span></span><br><span class="line">	<span class="keyword">if</span> u.Cash &lt; amount &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="constant">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/* 设置延迟Sleep，当多个goroutines并行执行时,便于进行数据安全分析 */</span></span><br><span class="line">	time.Sleep(<span class="number">500</span> * time.Millisecond)</span><br><span class="line">	u.Cash = u.Cash - amount</span><br><span class="line">	to.Cash = to.Cash + amount</span><br><span class="line">	<span class="keyword">return</span> <span class="constant">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	me := User&#123;Cash: <span class="number">500</span>&#125;</span><br><span class="line">	you := User&#123;Cash: <span class="number">500</span>&#125;</span><br><span class="line">	http.HandleFunc(<span class="string">"/"</span>, <span class="keyword">func</span>(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">		me.sendCash(&amp;you, <span class="number">50</span>) <span class="comment">//转账</span></span><br><span class="line">		fmt.Fprintf(w, <span class="string">"I have $%d\n"</span>, me.Cash)</span><br><span class="line">		fmt.Fprintf(w, <span class="string">"You have $%d\n"</span>, you.Cash)</span><br><span class="line">		fmt.Fprintf(w, <span class="string">"Total transferred: $%d\n"</span>, (you.Cash - <span class="number">500</span>))</span><br><span class="line">	&#125;)</span><br><span class="line">	http.ListenAndServe(<span class="string">":8080"</span>, <span class="constant">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="u5229_u7528Channel_2C_u66F4_u597D_u7684_u5B9E_u73B0_u5E76_u53D1"><a href="#u5229_u7528Channel_2C_u66F4_u597D_u7684_u5B9E_u73B0_u5E76_u53D1" class="headerlink" title="利用Channel,更好的实现并发"></a>利用Channel,更好的实现并发</h2><p>但是锁的问题很显然降低了<code>程序并发的性能</code>，锁是并发设计的最大敌人，在Go中推荐使用通道<code>Channel</code>，能够使用事件循环event loop机制更灵活地实现并发;通过委托一个后台协程监听通道，当通道中有数据时，立即进行转账操作，因为协程是顺序地读取通道中的数据，也就是巧妙地回避了竞争情况，没有必要使用任何状态变量防止<code>并发</code>竞争了。 具体示例:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Cash <span class="typename">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Transfer <span class="keyword">struct</span> &#123;</span><br><span class="line">	Sender    *User</span><br><span class="line">	Recipient *User</span><br><span class="line">	Amount    <span class="typename">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> sendCashHandler(transferchan <span class="keyword">chan</span> Transfer) &#123;</span><br><span class="line">	<span class="keyword">var</span> val Transfer</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		val = &lt;-transferchan</span><br><span class="line">		val.Sender.sendCash(val.Recipient, val.Amount)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (u *User) sendCash(to *User, amount <span class="typename">int</span>) <span class="typename">bool</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> u.Cash &lt; amount &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="constant">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/* 设置延迟Sleep，当多个goroutines并行执行时,便于进行数据安全分析 */</span></span><br><span class="line">	time.Sleep(<span class="number">500</span> * time.Millisecond)</span><br><span class="line">	u.Cash = u.Cash - amount</span><br><span class="line">	to.Cash = to.Cash + amount</span><br><span class="line">	<span class="keyword">return</span> <span class="constant">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	me := User&#123;Cash: <span class="number">500</span>&#125;</span><br><span class="line">	you := User&#123;Cash: <span class="number">500</span>&#125;</span><br><span class="line">	transferchan := <span class="built_in">make</span>(<span class="keyword">chan</span> Transfer)</span><br><span class="line">	<span class="keyword">go</span> sendCashHandler(transferchan)</span><br><span class="line">	http.HandleFunc(<span class="string">"/"</span>, <span class="keyword">func</span>(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">		transfer := Transfer&#123;Sender: &amp;me, Recipient: &amp;you, Amount: <span class="number">50</span>&#125;</span><br><span class="line">		transferchan &lt;- transfer</span><br><span class="line">		fmt.Fprintf(w, <span class="string">"I have $%d\n"</span>, me.Cash)</span><br><span class="line">		fmt.Fprintf(w, <span class="string">"You have $%d\n"</span>, you.Cash)</span><br><span class="line">		fmt.Fprintf(w, <span class="string">"Total transferred: $%d\n"</span>, (you.Cash - <span class="number">500</span>))</span><br><span class="line">	&#125;)</span><br><span class="line">	http.ListenAndServe(<span class="string">":8080"</span>, <span class="constant">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面这段代码创建了比较可靠的系统从而避免了<code>并发</code>竞争，但是我们会带来另外一个安全问题：<code>DoS(Denial of Service服务拒绝)</code>，如果我们的转账操作慢下来，那么不断进来的请求需要等待进行转账操作的那个协程从通道中读取新数据，但是这个线程忙于照顾转账操作，没有闲功夫读取通道中新数据，这个情况会导致系统容易遭受<code>DoS攻击</code>，外界只要发送大量请求就能让系统停止响应。</p>
<h2 id="u796D_u51FAselect__u8FDB_u4E00_u6B65_u63D0_u5347_u6027_u80FD"><a href="#u796D_u51FAselect__u8FDB_u4E00_u6B65_u63D0_u5347_u6027_u80FD" class="headerlink" title="祭出select 进一步提升性能"></a>祭出select 进一步提升性能</h2><p>一些基础机制比如buffered channel可以处理这种情况，但是buffered channel是有内存上限的，不足够保存所有请求数据，优化解决方案是使用Go杰出的<code>select</code>语句：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">"/"</span>, <span class="keyword">func</span>(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">	 transfer := Transfer&#123;Sender: &amp;me, Recipient: &amp;you, Amount: <span class="number">50</span>&#125;</span><br><span class="line">	 <span class="comment">/*转账*/</span></span><br><span class="line">	 result := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>)</span><br><span class="line">	 <span class="keyword">go</span> <span class="keyword">func</span>(transferchan <span class="keyword">chan</span>&lt;- Transfer, transfer Transfer, result <span class="keyword">chan</span>&lt;- <span class="typename">int</span>) &#123;</span><br><span class="line">	      transferchan &lt;- transfer</span><br><span class="line">	      result &lt;- <span class="number">1</span></span><br><span class="line">	 &#125;(transferchan, transfer, result)</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*用select来处理超时机制*/</span>	 </span><br><span class="line">	 <span class="keyword">select</span> &#123;</span><br><span class="line">	   <span class="keyword">case</span> &lt;-result:</span><br><span class="line">	    fmt.Fprintf(w, <span class="string">"I have $%d\n"</span>, me.Cash)</span><br><span class="line">	    fmt.Fprintf(w, <span class="string">"You have $%d\n"</span>, you.Cash)</span><br><span class="line">	    fmt.Fprintf(w, <span class="string">"Total transferred: $%d\n"</span>, (you.Cash - <span class="number">500</span>))</span><br><span class="line">	  <span class="keyword">case</span> &lt;-time.After(time.Second * <span class="number">10</span>): <span class="comment">//超时处理</span></span><br><span class="line">	    fmt.Fprintf(w, <span class="string">"Your request has been received, but is processing slowly"</span>)</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>这里提升了事件循环，等待不能超过10秒，等待超过timeout时间，会返回一个消息给User告诉它们请求已经接受，可能会花点时间处理，请耐心等候即可，使用这种方法我们降低了<code>DoS攻击</code>可能，一个真正健壮的能够<code>并发</code>处理转账且没有使用任何锁的系统诞生了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;golang&lt;/code&gt; 在1.5版本之前默认只使用一个核心来跑所有的&lt;code&gt;goroutines&lt;/code&gt;,即&lt;code&gt;GOMAXPROCS&lt;/code&gt;默认设置为1, ,即是串行执行&lt;code&gt;goroutines&lt;/code&gt;,在1.5版本后，&lt;code&gt;GOMAXPROCS&lt;/code&gt;默认设置为当前计算机真实的核心线程数，即是在并行执行&lt;code&gt;goroutines&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://www.grdtechs.com/categories/golang/"/>
    
    
      <category term="concurrency" scheme="http://www.grdtechs.com/tags/concurrency/"/>
    
      <category term="golang" scheme="http://www.grdtechs.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang 并发concurrency 使用总结</title>
    <link href="http://www.grdtechs.com/2016/02/17/go-concurrency-summarize/"/>
    <id>http://www.grdtechs.com/2016/02/17/go-concurrency-summarize/</id>
    <published>2016-02-17T13:47:51.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>go能处理高并发的根本原因在于执行go协程只需极少的栈内存(大概4~5KB),并且能根据需要动态增长和缩减占用的资源。<br><a id="more"></a></p>
<h2 id="u9AD8_u5E76_u53D1_u7684_u672C_u8D28goroutine"><a href="#u9AD8_u5E76_u53D1_u7684_u672C_u8D28goroutine" class="headerlink" title="高并发的本质goroutine"></a>高并发的本质goroutine</h2><p>简单而言,<code>goroutine</code>就是一段代码，一个函数入口，以及在堆上为其分配的一个堆栈。所以它非常廉价，我们可以很轻松的创建上万个<code>goroutine</code>，但它们并不是被操作系统所调度执行,而是通过系统的线程来多路派遣这些函数的执行，使得每个用go关键字执行的函数可以运行成为一个单位协程。当一个协程阻塞的时候，调度器就会自动把其他协程安排到另外的线程中去执行，从而实现了程序无等待并行化运行。而且调度的开销非常小，一颗CPU调度的规模不下于每秒百万次，这使得在程序中能够创建大量的<code>goroutine</code>，实现高并发的同时，依旧能保持高性能。<br><code>goroutine</code>是通过通信来共享内存,go中是通过<code>Channel</code>来实现通信的，<code>Channel</code>本身就像一根管道，go就通过这根管道进行数据的传递,实现消息通信。先来看一个简单的示例：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">bool</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="keyword">func</span>() &#123;</span><br><span class="line">	fmt.Println(<span class="string">"Go concurrency"</span>)</span><br><span class="line">	c &lt;- <span class="constant">true</span></span><br><span class="line">	<span class="built_in">close</span>(c)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  v := <span class="keyword">range</span> c &#123;</span><br><span class="line">	fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>上面的代码首先创建一个<code>bool</code>的<code>Channel</code>对象<code>c</code>,然后通过<code>go</code>关键字执行一个<code>goroutine</code>,紧接着执行一个<code>for</code>循环;<code>for</code>会循环去读取<code>c</code>中的值，如果读取到值，则执行<code>for</code>循环体（打印v的值），没读取到则<code>for</code>被阻塞等待,直到读取到<code>c</code>中的值再去执行<code>for</code>循环体然后继续循环读取<code>c</code>，如果执行了<code>close(c)</code>把<code>Channel</code>对象<code>c</code>关闭了，那<code>for</code>循环就退出不执行了。 这就是通过<code>Channel</code>通信执行<code>goroutine</code>的一个简单示例。</li>
<li><p>上面通过make这样初始化的<code>Channel</code>对象<code>c</code>是既可以写又可以被读取的双向通道, 有时候为了避免被误读误写操作，可以初始化一个单向的<code>Channel</code>对象。通过设置<code>Channel</code>的长度可以分为有缓冲和无缓冲两种<code>Channel</code>,无缓冲区的<code>Channel</code>,在等待读或等待写的过程中都会引起<code>同步阻塞</code>，而有缓冲区的<code>Channel</code>,可以看作<code>异步执行</code>,也可以认为控制为<code>同步执行</code>，只有当缓冲区被占用完了之后才会引起<code>阻塞</code>。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>, <span class="number">3</span>)  <span class="comment">//初始化缓冲区长度为3的Channel</span></span><br><span class="line"><span class="keyword">var</span> send <span class="keyword">chan</span>&lt;- <span class="typename">int</span> = c <span class="comment">//只写入的Channel</span></span><br><span class="line"><span class="keyword">var</span> recv &lt;-<span class="keyword">chan</span> <span class="typename">int</span> = c <span class="comment">//只读取的Channel</span></span><br></pre></td></tr></table></figure>
<p>  <strong> 注意: </strong>  只读或只写的单向<code>Channel</code> 都需要借助其它<code>Channel</code>才有实际意义，定义一个只写入但是读取不出来的<code>Channel</code>没有任何用处。单向<code>Channel</code>用作函数形参用于防止参数在函数内部被误读误写是非常有帮助的。</p>
</li>
</ul>
<h2 id="u5F00_u542F_u591A_u6838_u5E76_u884C_u5E76_u53D1_u6267_u884C"><a href="#u5F00_u542F_u591A_u6838_u5E76_u884C_u5E76_u53D1_u6267_u884C" class="headerlink" title="开启多核并行并发执行"></a>开启多核并行并发执行</h2><p>默认情况下，go所有的<code>goroutines</code>是在一个线程中执行的，而不是同时利用多核进行并行执行，或者通过切换时间片让出CPU进行并发执行。下面看一段示例：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	runtime.GOMAXPROCS(runtime.NumCPU())</span><br><span class="line">	wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">	wg.Add(<span class="number">3</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> GoPrint(&amp;wg)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> GoPrint(wg *sync.WaitGroup) &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">		time.Sleep(time.Second)</span><br><span class="line">		fmt.Printf(<span class="string">"%d "</span>, i)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>目前只有显示设置了<code>runtime.GOMAXPROCS</code>,go才会开启多核并行执行<code>goroutines</code>, 如果在<code>GoPrint</code>方法中不加入<code>time.Sleep</code>，输出的结果将会是<code>0 1 2 0 1 2 0 1 2</code>，如果当前<code>goroutine</code>不发生阻塞，它是不会让出CPU给其他<code>goroutine</code>的, 所以在<code>GoPrint</code>中不加<code>time.Sleep</code>,输出会是一个一个<code>goroutine</code>进行的，而sleep函数则阻塞掉了 当前<code>goroutine</code>, 当前<code>goroutine</code>主动让其他<code>goroutine</code>执行, 所以形成了逻辑上的并行, 也就是并发。</p>
<h2 id="go_u5E76_u53D1_u6267_u884C_u5B89_u5168_u95EE_u9898"><a href="#go_u5E76_u53D1_u6267_u884C_u5B89_u5168_u95EE_u9898" class="headerlink" title="go并发执行安全问题"></a>go并发执行安全问题</h2><p>go并发执行当多个<code>goroutine</code>同时访问一个共有的资源时，在不加锁的情况很容易出行数据不同步的问题，看一示例:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> sell_tickets(wg *sync.WaitGroup, i <span class="typename">int</span>) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> total_tickets &gt; <span class="number">0</span> &#123;</span><br><span class="line"></span><br><span class="line">		mutex.Lock()</span><br><span class="line">		<span class="comment">// 如果有票就卖</span></span><br><span class="line">		<span class="keyword">if</span> total_tickets &gt; <span class="number">0</span> &#123;</span><br><span class="line">			time.Sleep(time.Duration(rand.Intn(<span class="number">5</span>)) * time.Millisecond)</span><br><span class="line">			<span class="comment">// 卖一张票</span></span><br><span class="line">			total_tickets--</span><br><span class="line">			fmt.Println(<span class="string">"id:"</span>, i, <span class="string">" ticket:"</span>, total_tickets)</span><br><span class="line">		&#125;</span><br><span class="line">		mutex.Unlock()</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面是一个多<code>goroutine</code>并发买票的问题，比如当开启5个<code>goroutine</code>来卖100张票，如果不加锁，则有可能会出行多出一些不存在的票的问题。所以当并发访问公有资源时要注意加锁保护公有资源属性修改的唯一性和访问时数据同步问题。<br><a href="https://github.com/researchlab/golearning/blob/master/concurrency/concurrency_sync_mutex.go" target="_blank" rel="external">示例代码</a></p>
<h2 id="u6279_u91CF_u5904_u7406_u591A_u4E2AChannel_u64CD_u4F5C"><a href="#u6279_u91CF_u5904_u7406_u591A_u4E2AChannel_u64CD_u4F5C" class="headerlink" title="批量处理多个Channel操作"></a>批量处理多个Channel操作</h2><p>go通过<code>Select</code>可以同时处理多个<code>Channel</code>,<code>Select</code>默认是阻塞的，只有当监听的<code>Channel</code>中有发送或接收可以进行时才会运行,当同时有多个可用的<code>Channel</code>,<code>Select</code>按随机顺序进行处理,<code>Select</code>可以方便处理多<code>Channel</code>同时响应，在goroutine阻塞的情况也可以方便借助<code>Select</code>超时机制来解除阻塞僵局，下面来看一个示例:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> getHttpRes(url <span class="typename">string</span>) (<span class="typename">string</span>, error) &#123;</span><br><span class="line">	res := <span class="built_in">make</span>(<span class="keyword">chan</span> *http.Response, <span class="number">1</span>)</span><br><span class="line">	httpError := <span class="built_in">make</span>(<span class="keyword">chan</span> *error)</span><br><span class="line">	<span class="keyword">go</span> <span class="keyword">func</span>() &#123;</span><br><span class="line">		resp, err := http.Get(url)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="constant">nil</span> &#123;</span><br><span class="line">			httpError &lt;- &amp;err</span><br><span class="line">		&#125;</span><br><span class="line">		res &lt;- resp</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> r := &lt;-res:</span><br><span class="line">			result, err := ioutil.ReadAll(r.Body)</span><br><span class="line">			<span class="keyword">defer</span> r.Body.Close()</span><br><span class="line">			<span class="keyword">return</span> <span class="typename">string</span>(result), err</span><br><span class="line">		<span class="keyword">case</span> err := &lt;-httpError:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"err"</span>, *err</span><br><span class="line">		<span class="keyword">case</span> &lt;-time.After(<span class="number">2000</span> * time.Millisecond):</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"Timed out"</span>, errors.New(<span class="string">"Timed out"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>发起http请求之后通常会有三种状况:1.访问成功，返回内容值;2.访问失败，返回错误信息;3.访问超时，返回超时。上面的代码中利用<code>Select</code>很方便的处理了go并发执行中多可用<code>Channel</code>的处理问题，通过设置超时，帮助程序跳出超时等待的僵局。<br><a href="https://github.com/researchlab/golearning/blob/master/concurrency/select_timeout.go" target="_blank" rel="external">示例代码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;go能处理高并发的根本原因在于执行go协程只需极少的栈内存(大概4~5KB),并且能根据需要动态增长和缩减占用的资源。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://www.grdtechs.com/categories/golang/"/>
    
    
      <category term="concurrency" scheme="http://www.grdtechs.com/tags/concurrency/"/>
    
      <category term="golang" scheme="http://www.grdtechs.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang reflect使用总结</title>
    <link href="http://www.grdtechs.com/2016/02/17/go-reflect-summarize/"/>
    <id>http://www.grdtechs.com/2016/02/17/go-reflect-summarize/</id>
    <published>2016-02-17T08:57:59.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>反射是一种检查存储在接口变量中的<code>&lt;值,类型&gt;</code>对的机制，借助go反射包提供的<code>reflect.TypeOf</code>和<code>reflect.ValueOf</code>可以方便的访问到一个接口值的<code>reflect.Type</code>和<code>reflect.Value</code>部分，从而可进一步得到这个接口的结构类型和对其进行值的修改操作。<br><a id="more"></a></p>
<h2 id="u53CD_u5C04_u7684_u4F7F_u7528"><a href="#u53CD_u5C04_u7684_u4F7F_u7528" class="headerlink" title="反射的使用"></a>反射的使用</h2><ol>
<li><p><strong>获取接口对象的字段,类型和方法信息</strong><br>先定义个通用的结构体</p>
<pre><code>type User struct{
    Id int
    Name string
    Age int
}
</code></pre><p>将接口对象类型信息映射为反射类型信息</p>
<pre><code class="golang"><span class="keyword">func</span> Info(o <span class="keyword">interface</span>{}) {
    t := reflect.TypeOf(o)         <span class="comment">//获取接口的类型</span>
    fmt.Println(<span class="string">"Type:"</span>, t.Name()) <span class="comment">//t.Name() 获取接口的名称</span>

    <span class="keyword">if</span> t.Kind() != refelct.Struct { <span class="comment">//通过Kind()来判断反射出的类型是否为需要的类型</span>
        fmt.Println(<span class="string">"err: type invalid!"</span>)        
        <span class="keyword">return</span>
    }        

    v := reflect.ValueOf(o) <span class="comment">//获取接口的值类型</span>
    fmt.Println(<span class="string">"Fields:"</span>)

    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; t.NumField(); i++ { <span class="comment">//NumField取出这个接口所有的字段数量</span>
    f := t.Field(i)                                   <span class="comment">//取得结构体的第i个字段</span>
    val := v.Field(i).Interface()                     <span class="comment">//取得字段的值</span>
    fmt.Printf(<span class="string">"%6s: %v = %v\n"</span>, f.Name, f.Type, val) <span class="comment">//第i个字段的名称,类型,值</span>
    }

    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; t.NumMethod(); i++{
        m := t.Method(i)
        fmt.Printf(<span class="string">"%6s: %v\n"</span>, m.Name,m.Type) <span class="comment">//获取方法的名称和类型       </span>
    }
}
</code></pre>
<p>获取接口对象的类型名称，通过<code>refelct.TypeOf()</code>获取接口对象的类型,并通过<code>Name()</code>方法获取接口的名称。<br>获取对象中所有字段的名称,类型和值,通过<code>reflect.ValueOf()</code>获取接口对象的值类型取得字段的名称和类型,然后通过<code>v.Field(i).Interface()</code>取得第i个字段的值。<br>还可以通过<code>NumMethod()</code>循环获取接口对象所有方法的名称和类型。<br><a href="https://github.com/researchlab/golearning/blob/master/reflect/01reflect.go" target="_blank" rel="external">示例代码</a></p>
</li>
<li><p><strong>反射接口对象中的匿名或嵌入字段信息</strong><br>先再添加一个Manager结构,User作为它的匿名字段</p>
<pre><code>type Manager struct{
    User
    title string
}
</code></pre><p>初始化Manager的两种方法：</p>
<pre><code>m0 := Manager{User: User{1,&quot;Mike&quot;,11},title: &quot;Man&quot;}
m1 := Manager{User{1,&quot;Mike&quot;,11},&quot;Man&quot;} //这种初始化,赋值顺序必须和结构体中的声明顺序相同! 
</code></pre><p>现在如何来取出Manager中的匿名字段User？</p>
<pre><code>t := refelct.TypeOf(m)
fmt.Printf(&quot;%#v\n&quot;, t.Field(0))
</code></pre><p>如上述代码，通过<code>t := refelct.TypeOf(m)</code>将Manager的字段类型取出来,在反射中对象字段是通过索引取到的，所以可通过<code>t.Field(0)</code>,</p>
<pre><code>#reflect.StructField{Name:&quot;User&quot;, PkgPath:&quot;&quot;, Type:(*reflect.rtype)(0xedd20), Tag:&quot;&quot;, Offset:0x0, Index:[]int{0}, Anonymous:true}
</code></pre><p>还可以通过<code>FieldByIndex</code>和<code>FieldByName</code>两种方法取得匿名结构体中的字段属性</p>
<ol>
<li>给<code>FieldByIndex()</code>传入一个int型的slice索引,如<code>FieldByIndex([]int{0,0})</code>即取得User结构体中的Id字段。</li>
<li>通过<code>FieldByName(&quot;Id&quot;)</code>也可以取得User结构体中Id字段。</li>
</ol>
</li>
</ol>
<h2 id="u901A_u8FC7_u53CD_u5C04_u4FEE_u6539_u5BF9_u8C61"><a href="#u901A_u8FC7_u53CD_u5C04_u4FEE_u6539_u5BF9_u8C61" class="headerlink" title="通过反射修改对象"></a>通过反射修改对象</h2><p>上面通过<code>reflect.TypeOf</code>和<code>reflect.ValueOf</code>已经可以得到接口对象的类型,字段和方法等属性了，怎么通过反射来修改对象的字段值？</p>
<pre><code>x := 100
v := refelct.ValueOf(&amp;x) //传入地址
v.Elem().SetInt(200) //成功修改x值为200
</code></pre><p>要修改变量x的值，首先就要通过<code>reflect.ValueOf</code>来获取x的值类型,<code>refelct.ValueOf</code>返回的值类型是变量x一份值拷贝,要修改变量x就要传递x的地址,从而返回x的地址对象,才可以进行对x变量值对修改操作。在得到x变量的地址值类型之后先调用<code>Elem()</code>返回地址指针指向的值的Value封装。然后通过<code>Set</code>方法进行修改赋值。<br>通过反射可以很容易的修改变量的值，怎么来修改结构体中的字段值？</p>
<pre><code>func SetInfo(o interface{}) {
        v := reflect.ValueOf(o)

        if v.Kind() == reflect.Ptr &amp;&amp; !v.Elem().CanSet() { //判断是否为指针类型 元素是否可以修改
            fmt.Println(&quot;cannot set&quot;)
                return
        } else {
            v = v.Elem() //实际取得的对象
        }

        //判断字段是否存在
        f := v.FieldByName(&quot;Name&quot;)
        if !f.IsValid() {
            fmt.Println(&quot;wuxiao&quot;)
                return
        }

        //设置字段
        if f := v.FieldByName(&quot;Name&quot;); f.Kind() == reflect.String {
            f.SetString(&quot;BY&quot;)
        }
}
</code></pre><p>要成功修改结构体中的某个字段,主要进行以下操作：</p>
<ol>
<li>首先要反射出这个字段的地址值类型;</li>
<li>判断反射返回类型是否为<code>reflect.Ptr</code>指针类型（通过指针才能操作对象地址中的值)同时还要判断这个元素是否可以修改;</li>
<li>通过<code>FieldByName</code>的返回值判断字段是否存在</li>
<li>通过<code>Kind()</code>和<code>Set</code>来修改字段的值<br><a href="https://github.com/researchlab/golearning/blob/master/reflect/02reflect.go" target="_blank" rel="external">示例代码</a></li>
</ol>
<h2 id="u901A_u8FC7_u53CD_u5C04_u201C_u52A8_u6001_u201D_u8C03_u7528_u65B9_u6CD5"><a href="#u901A_u8FC7_u53CD_u5C04_u201C_u52A8_u6001_u201D_u8C03_u7528_u65B9_u6CD5" class="headerlink" title="通过反射“动态”调用方法"></a>通过反射“动态”调用方法</h2><p>现在已经可以通过反射获取并修改接口对象的字段，类型等信息了，那怎么通过反射“动态”调用接口对象等方法？<br>先为<code>User</code>结构体引入一个<code>Hello</code>方法：</p>
<pre><code>func (u User) Hello(m User) (int, string) {
    fmt.Println(&quot;Hello&quot;, m.Name, &quot;, I&apos;m &quot;, u.Name)
    return m.Age + u.Age, u.Name
}
</code></pre><p>下面通过反射来调用<code>Hello</code>这个方法：</p>
<pre><code>func GetInfo(u interface{}) {
    m := User{2, &quot;Json&quot;, 12}

    v := reflect.ValueOf(u)

    if v.Kind() != reflect.Struct {
        fmt.Println(&quot;type invalid&quot;)
        return
    }

    mv := v.MethodByName(&quot;Hello&quot;) //获取对应的方法
    if !mv.IsValid() {            //判断方法是否存在
        fmt.Println(&quot;Func Hello not exist&quot;)
        return
    }

    args := []reflect.Value{reflect.ValueOf(m)} //初始化传入等参数，传入等类型只能是[]reflect.Value类型
    res := mv.Call(args)
    fmt.Println(res[0], res[1])

}
</code></pre><p>通过<code>MethodByName</code>先获取对象的<code>Hello</code>方法,然后准备要传入的参数,这里传入的参数必须是<code>[]refelct.Value</code>类型,传入的参数值必须强制转换为反射值类型<code>refelct.Value</code>。<br>最后通过调用<code>Call</code>方法就可以实现通过反射”动态”调用对象的方法。<br><a href="https://github.com/researchlab/golearning/blob/master/reflect/03reflect.go" target="_blank" rel="external">示例代码</a></p>
<h2 id="u5C0F_u7ED3"><a href="#u5C0F_u7ED3" class="headerlink" title="小结"></a>小结</h2><ul>
<li>通过反射包提供<code>refelct.TypeOf</code>和<code>refelct.ValueOf</code>方法获得接口对象的类型，值和方法等。</li>
<li>通过反射修改字段值等时候需要传入地址类型，并且需要检查反射返回值类型是否为<code>refelct.Ptr</code>，检查字段是否<code>CanSet</code>,检查字段是存在,然后通过<code>Kind()</code>来帮助赋值相应对类型值。</li>
<li>最后总结了通过<code>MethodByName</code>等方法如何“动态”调用对象的方法，示例代码也演示了如何传入和接收多个参数值。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;反射是一种检查存储在接口变量中的&lt;code&gt;&amp;lt;值,类型&amp;gt;&lt;/code&gt;对的机制，借助go反射包提供的&lt;code&gt;reflect.TypeOf&lt;/code&gt;和&lt;code&gt;reflect.ValueOf&lt;/code&gt;可以方便的访问到一个接口值的&lt;code&gt;reflect.Type&lt;/code&gt;和&lt;code&gt;reflect.Value&lt;/code&gt;部分，从而可进一步得到这个接口的结构类型和对其进行值的修改操作。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://www.grdtechs.com/categories/golang/"/>
    
    
      <category term="golang" scheme="http://www.grdtechs.com/tags/golang/"/>
    
      <category term="reflect" scheme="http://www.grdtechs.com/tags/reflect/"/>
    
  </entry>
  
  <entry>
    <title>[译]GO BOOTCAMP 第七章：接口</title>
    <link href="http://www.grdtechs.com/2016/01/25/go-interfaces/"/>
    <id>http://www.grdtechs.com/2016/01/25/go-interfaces/</id>
    <published>2016-01-25T15:12:56.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>接口被定义为一组方法的集合, 接口可以接收任何其实现的方法的值.<br><a id="more"></a><br>下面利用接口的特性，重构了之前的一个案例,这次通过给<code>Greet</code>方法提供一个接口类型参数<code>Namer</code>，使得<code>Greet</code>方法更通用. <code>Namer</code>是定义的新接口，只包含一个方法<code>Name()</code>,所以<code>Greet()</code>可以接收任意有<code>Name()</code>方法定义的值.</p>
<p>为<code>User</code>结构体实现这个接口，定义了一个<code>Name()</code>方法。 可以通过传递一个执行<code>User</code>的指针给<code>Greet</code>方法来调用<code>Greet</code>.<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	FirstName, LastName <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (u *User) Name() <span class="typename">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">"%s %s"</span>, u.FirstName, u.LastName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Namer <span class="keyword">interface</span> &#123;</span><br><span class="line">	Name() <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> Greet(n Namer) <span class="typename">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">"Dear %s"</span>, n.Name())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	u := &amp;User&#123;<span class="string">"Matt"</span>, <span class="string">"Aimonetti"</span>&#125;</span><br><span class="line">	fmt.Println(Greet(u))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以定义一个新的类型实现相同的接口，<code>Greet</code>函数同样可以使用<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	FirstName, LastName <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (u *User) Name() <span class="typename">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">"%s %s"</span>, u.FirstName, u.LastName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Customer <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id       <span class="typename">int</span></span><br><span class="line">	FullName <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (c *Customer) Name() <span class="typename">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> c.FullName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Namer <span class="keyword">interface</span> &#123;</span><br><span class="line">	Name() <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> Greet(n Namer) <span class="typename">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">"Dear %s"</span>, n.Name())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	u := &amp;User&#123;<span class="string">"Matt"</span>, <span class="string">"Aimonetti"</span>&#125;</span><br><span class="line">	fmt.Println(Greet(u))</span><br><span class="line">	c := &amp;Customer&#123;<span class="number">42</span>, <span class="string">"Francesc"</span>&#125;</span><br><span class="line">	fmt.Println(Greet(c))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="u63A5_u53E3_u6EE1_u8DB3_u9690_u5F0F_u5B9E_u73B0"><a href="#u63A5_u53E3_u6EE1_u8DB3_u9690_u5F0F_u5B9E_u73B0" class="headerlink" title="接口满足隐式实现"></a>接口满足隐式实现</h2><p>一个类型可以通过实现接口的所有方法来实现接口.</p>
<p>不需要显示的取声明或者实现某个接口.</p>
<p>隐式接口解偶实现定义接口的包，不需要额外的依赖.</p>
<p>推荐合理定义接口，就不需要额外标记定义的新接口.<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">	Read(b []<span class="typename">byte</span>) (n <span class="typename">int</span>, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">	Write(b []<span class="typename">byte</span>) (n <span class="typename">int</span>, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">	Reader</span><br><span class="line">	Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	<span class="keyword">var</span> w Writer</span><br><span class="line"></span><br><span class="line">	<span class="comment">// os.Stdout implements Writer</span></span><br><span class="line">	w = os.Stdout</span><br><span class="line"></span><br><span class="line">	fmt.Fprintf(w, <span class="string">"hello, writer\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="u9519_u8BEF"><a href="#u9519_u8BEF" class="headerlink" title="错误"></a>错误</h2><p>错误可以被描述任意的错误字符串. 可以捕获前置定义，内置接口类型，错误等， 错误返回的是一个字符串。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="typename">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以使用<code>fmt</code>包来打印错误信息<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyError <span class="keyword">struct</span> &#123;</span><br><span class="line">    When time.Time</span><br><span class="line">    What <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (e *MyError) Error() <span class="typename">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"at %v, %s"</span>,</span><br><span class="line">        e.When, e.What)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> run() error &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;MyError&#123;</span><br><span class="line">        time.Now(),</span><br><span class="line">        <span class="string">"it didn't work"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">    <span class="keyword">if</span> err := run(); err != <span class="constant">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> 练习题 </strong><br>自定义一个<code>Sqrt</code>函数，让起返回一个错误。<br>创建一个新类型<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ErrNegativeSqrt <span class="typename">float64</span></span><br></pre></td></tr></table></figure></p>
<p>定义一个Error()<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> (e ErrNegativeSqrt) Error() <span class="typename">string</span></span><br></pre></td></tr></table></figure></p>
<p>如果直接打印错误<code>fmt.Print(e)</code> 可能使得程序陷入无限循环，可以通过<code>fmt.Print(float64(e))</code> 来避免这种情况.</p>
<p><strong> 解决方案 </strong><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ErrNegativeSqrt <span class="typename">float64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (e ErrNegativeSqrt) Error() <span class="typename">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">"cannot Sqrt negative number: %g"</span>, <span class="typename">float64</span>(e))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> Sqrt(x <span class="typename">float64</span>) (<span class="typename">float64</span>, error) &#123;</span><br><span class="line">	<span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>, ErrNegativeSqrt(x)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	z := <span class="number">1.0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		z = z - ((z*z)-x)/(<span class="number">2</span>*z)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> z, <span class="constant">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	fmt.Println(Sqrt(<span class="number">2</span>))</span><br><span class="line">	fmt.Println(Sqrt(-<span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> Tip: </strong><br>当声明一个浮点数声明时，可以省略小数点后面的值, 如下面那样, 但是，不推荐!<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z := <span class="number">1.</span></span><br><span class="line"><span class="comment">// same as</span></span><br><span class="line"><span class="comment">// z := 1.0</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;接口被定义为一组方法的集合, 接口可以接收任何其实现的方法的值.&lt;br&gt;
    
    </summary>
    
      <category term="go-bootcamp" scheme="http://www.grdtechs.com/categories/go-bootcamp/"/>
    
    
      <category term="golang" scheme="http://www.grdtechs.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[译]GO BOOTCAMP 第六章：方法</title>
    <link href="http://www.grdtechs.com/2016/01/23/go-methods/"/>
    <id>http://www.grdtechs.com/2016/01/23/go-methods/</id>
    <published>2016-01-23T14:19:07.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>从技术上来将，<code>Go</code>并不是一门面向对象的编程语言,所以与充许将类型和方法以面向对象的方式编程有些差别,最大的差异在于<code>Go</code>不支持类型继承,但是提供一个<code>接口</code>的概念. 在本章中，我们主要来讨论在<code>Go</code>编程中使用方法和接口.<br><a id="more"></a></p>
<p><strong> 函数和方法的区别？</strong><br>方法是定义了接收者的函数，从面向对象的角度来讲,方法是对象实例上的一个函数。</p>
<p><code>Go</code>语言没有<code>class</code>类的概念，但是你可以在结构体类型中定义方法.<br>方法的接收者在<code>func</code>关键字和方法名之间，并以它自己的参数形式出现. 下面是一个拥有<code>FirstName</code>和<code>LastName</code>字段的<code>User</code>结构体的示例<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	FirstName, LastName <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (u User) Greeting() <span class="typename">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">"Dear %s %s"</span>, u.FirstName, u.LastName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	u := User&#123;<span class="string">"Matt"</span>, <span class="string">"Aimonetti"</span>&#125;</span><br><span class="line">	fmt.Println(u.Greeting())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意上述代码中，是如何在结构体外定义方法的，如果你做过面向对象编程，你可能会觉得有点奇怪. <code>User</code>结构体上的方法可以定义在包内的任意位置.</p>
<h2 id="u7EC4_u7EC7_u4EE3_u7801"><a href="#u7EC4_u7EC7_u4EE3_u7801" class="headerlink" title="组织代码"></a>组织代码</h2><p>方法可以定义在包中的任意文件中，但是推荐向下面这样定义方法来组织代码结构<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment">// list of packages to import</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// list of constants</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	ConstExample = <span class="string">"const before vars"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// list of variables</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	ExportedVar    = <span class="number">42</span></span><br><span class="line">	nonExportedVar = <span class="string">"so say we all"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Main type(s) for the file,</span></span><br><span class="line"><span class="comment">// try to keep the lowest amount of structs per file when possible.</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	FirstName, LastName <span class="typename">string</span></span><br><span class="line">	Location            *UserLocation</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserLocation <span class="keyword">struct</span> &#123;</span><br><span class="line">	City    <span class="typename">string</span></span><br><span class="line">	Country <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// List of functions</span></span><br><span class="line"><span class="keyword">func</span> NewUser(firstName, lastName <span class="typename">string</span>) *User &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;User&#123;FirstName: firstName,</span><br><span class="line">		LastName: lastName,</span><br><span class="line">		Location: &amp;UserLocation&#123;</span><br><span class="line">			City:    <span class="string">"Santa Monica"</span>,</span><br><span class="line">			Country: <span class="string">"USA"</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// List of methods</span></span><br><span class="line"><span class="keyword">func</span> (u *User) Greeting() <span class="typename">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">"Dear %s %s"</span>, u.FirstName, u.LastName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以在任何类型上定义方法，而不仅仅在结构体上取定义方法.但是不能在本包中为另一个包中的类型定义方法，也不能为<code>Go</code>语言内置的基础类型定义方法.</p>
<h2 id="u7C7B_u578B_u522B_u540D"><a href="#u7C7B_u578B_u522B_u540D" class="headerlink" title="类型别名"></a>类型别名</h2><p>在一个不需要你的类型上定义方法， 你需要给这个类型定义一个别名用来扩展</p>
<p>示例1 </p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyStr <span class="typename">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (s MyStr) Uppercase() <span class="typename">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> strings.ToUpper(<span class="typename">string</span>(s))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	fmt.Println(MyStr(<span class="string">"test"</span>).Uppercase())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>示例2</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyFloat <span class="typename">float64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (f MyFloat) Abs() <span class="typename">float64</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="typename">float64</span>(-f)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="typename">float64</span>(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">    f := MyFloat(-math.Sqrt2)</span><br><span class="line">    fmt.Println(f.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u65B9_u6CD5_u63A5_u6536_u8005"><a href="#u65B9_u6CD5_u63A5_u6536_u8005" class="headerlink" title="方法接收者"></a>方法接收者</h2><p>方法可以通过一个类型名或一个指向类型的指针与类型关联起来.在上述两个案例中，通过类型别名<code>MyStr</code>和<code>MyFloat</code>定义了相应的方法.</p>
<p>有如下理由推荐使用指针接收器:</p>
<ul>
<li>避免为每个方法拷贝值(如果值类型是一个大型的结构体，使用指针则更高效）</li>
<li>上面的例子可以做如下更好的改进</li>
</ul>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	FirstName, LastName <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (u *User) Greeting() <span class="typename">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">"Dear %s %s"</span>, u.FirstName, u.LastName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	u := &amp;User&#123;<span class="string">"Matt"</span>, <span class="string">"Aimonetti"</span>&#125;</span><br><span class="line">	fmt.Println(u.Greeting())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>Go</code>语言中，一切都是值传递,意味着当<code>Greeting()</code>定义在值类型上，每次调用<code>Greeting()</code>,都需要拷贝一份<code>User</code>结构体，而如果使用指针，则只需要拷贝一份指针.</p>
<ul>
<li>另一个推荐使用指针的原因是，可以方便地通过指针将方法体内修改的值传递到方法外面.<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	X, Y <span class="typename">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (v *Vertex) Scale(f <span class="typename">float64</span>) &#123;</span><br><span class="line">	v.X = v.X * f</span><br><span class="line">	v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (v *Vertex) Abs() <span class="typename">float64</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	v := &amp;Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	v.Scale(<span class="number">5</span>)</span><br><span class="line">	fmt.Println(v, v.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>在上述案例中,<code>Abs()</code>因为没有修改接收者的值(the vertex),所以进行值类型定义和指针定义都美关系. 然而<code>Scale()</code>方法必需定义在指针上, 因为<code>Scale()</code>改变了<code>X</code>和<code>Y</code>的值，需要通过指针将方法体内的修改传递到方法外部来.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;从技术上来将，&lt;code&gt;Go&lt;/code&gt;并不是一门面向对象的编程语言,所以与充许将类型和方法以面向对象的方式编程有些差别,最大的差异在于&lt;code&gt;Go&lt;/code&gt;不支持类型继承,但是提供一个&lt;code&gt;接口&lt;/code&gt;的概念. 在本章中，我们主要来讨论在&lt;code&gt;Go&lt;/code&gt;编程中使用方法和接口.&lt;br&gt;
    
    </summary>
    
      <category term="go-bootcamp" scheme="http://www.grdtechs.com/categories/go-bootcamp/"/>
    
    
      <category term="golang" scheme="http://www.grdtechs.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang xorm库使用总结</title>
    <link href="http://www.grdtechs.com/2016/01/21/go-xorm-summarize/"/>
    <id>http://www.grdtechs.com/2016/01/21/go-xorm-summarize/</id>
    <published>2016-01-21T17:50:07.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p><a href="https://github.com/go-xorm/xorm" target="_blank" rel="external">XORM</a>是一个简单而强大的Go语言<code>ORM(Object Relational Mapping)</code>库,通过调用<code>XORM</code>提供简单丰富的API接口,可以简化便捷的完成对数据库的各类操作。<code>XORM</code>目前已经支持所有主流关系型数据库,如Mysql,SQLite,Oracle,Postgres等。<br><a id="more"></a></p>
<h2 id="u5B89_u88C5_u53CA_u7279_u6027"><a href="#u5B89_u88C5_u53CA_u7279_u6027" class="headerlink" title="安装及特性"></a>安装及特性</h2><p><code>XORM</code>的安装很简单， 具体可参看<a href="http://xorm.io/" target="_blank" rel="external">官网安装</a>。<br>未完待续</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/go-xorm/xorm&quot;&gt;XORM&lt;/a&gt;是一个简单而强大的Go语言&lt;code&gt;ORM(Object Relational Mapping)&lt;/code&gt;库,通过调用&lt;code&gt;XORM&lt;/code&gt;提供简单丰富的API接口,可以简化便捷的完成对数据库的各类操作。&lt;code&gt;XORM&lt;/code&gt;目前已经支持所有主流关系型数据库,如Mysql,SQLite,Oracle,Postgres等。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://www.grdtechs.com/categories/golang/"/>
    
    
      <category term="golang" scheme="http://www.grdtechs.com/tags/golang/"/>
    
      <category term="xorm" scheme="http://www.grdtechs.com/tags/xorm/"/>
    
  </entry>
  
  <entry>
    <title>[译]GO BOOTCAMP 第五章：控制流程</title>
    <link href="http://www.grdtechs.com/2016/01/21/go-control/"/>
    <id>http://www.grdtechs.com/2016/01/21/go-control/</id>
    <published>2016-01-21T11:33:49.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p><code>Go</code>语言中主要有三种控制流程<code>if</code>,<code>for</code>循环,<code>switch case</code>语句。<br><a id="more"></a></p>
<h2 id="if__u58F0_u660E"><a href="#if__u58F0_u660E" class="headerlink" title="if 声明"></a>if 声明</h2><p><code>Go</code>中的<code>if</code>声明，除了不需要<code>()</code>和必需<code>{}</code>之外，其它跟<code>C</code>或<code>Java</code>类似的。 像<code>for</code>语句一样,<code>if</code>语句可以在条件执行语句前有一个简短的声明,在<code>if</code>声明中声明的参数，其作用仅限于<code>if</code>语句体。在<code>if</code>语句体中声明的变量，有效作用域也仅限于本语句体.</p>
<p><code>if</code>声明示例<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> answer != <span class="number">42</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Wrong answer"</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>if</code>简短初始化声明示例<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := foo(); err != <span class="constant">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="for_u5FAA_u73AF"><a href="#for_u5FAA_u73AF" class="headerlink" title="for循环"></a>for循环</h2><p><code>Go</code>语言中只有一个循环结构，<code>for</code>循环. 基本的<code>for</code>循环体与<code>C</code>或<code>Java</code>语言类似,只是不需要<code>()</code>,必需<code>{}</code>. 并且和在<code>C</code>和<code>Java</code>中一个，可以给前置条件和后置声明留空.<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    sum += i</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>前置条件和后置声明赋空示例<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ; sum &lt; <span class="number">1000</span>; &#123;</span><br><span class="line">    sum += sum</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>for</code>完成<code>while</code>功能<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> sum &lt; <span class="number">1000</span> &#123;</span><br><span class="line">    sum += sum</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>无限循环示例<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  <span class="comment">// do something in a loop forever</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Switch_case__u58F0_u660E"><a href="#Switch_case__u58F0_u660E" class="headerlink" title="Switch case 声明"></a>Switch case 声明</h2><p>多数开发语言都有<code>Switch case</code>控制流程，用于避免复杂的<code>if else</code>语句<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">		<span class="string">"time"</span></span><br><span class="line">		)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">func</span> main() &#123;</span><br><span class="line">			now := time.Now().Unix()</span><br><span class="line">				mins := now % <span class="number">2</span></span><br><span class="line">					<span class="keyword">switch</span> mins &#123;</span><br><span class="line">						<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">								fmt.Println(<span class="string">"even"</span>)</span><br><span class="line">									<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">											fmt.Println(<span class="string">"odd"</span>)</span><br><span class="line">												&#125;</span><br><span class="line">												&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是<code>Go</code>语言中的<code>Switch case</code>还是有如下差别的</p>
<ul>
<li>只能对同类型数据进行比对</li>
<li>如果所有<code>case</code>都没有命中的化，可以设置一个<code>default</code>语句执行默认的操作.</li>
<li>可以在<code>case</code>声明中使用表达式，例如可以在声明中计算某个值</li>
</ul>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	num := <span class="number">3</span></span><br><span class="line">		v := num % <span class="number">2</span></span><br><span class="line">			<span class="keyword">switch</span> v &#123;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">						fmt.Println(<span class="string">"even"</span>)</span><br><span class="line">							<span class="keyword">case</span> <span class="number">3</span> - <span class="number">2</span>:</span><br><span class="line">									fmt.Println(<span class="string">"odd"</span>)</span><br><span class="line">										&#125;</span><br><span class="line">										&#125;</span><br></pre></td></tr></table></figure>
<p>也可以在一个<code>case</code>声明中放多个条件值<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	score := <span class="number">7</span></span><br><span class="line">	<span class="keyword">switch</span> score &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>:</span><br><span class="line">		fmt.Println(<span class="string">"Terrible"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>, <span class="number">5</span>:</span><br><span class="line">		fmt.Println(<span class="string">"Mediocre"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span>:</span><br><span class="line">		fmt.Println(<span class="string">"Not bad"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">8</span>, <span class="number">9</span>:</span><br><span class="line">		fmt.Println(<span class="string">"Almost perfect"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">		fmt.Println(<span class="string">"hmm did you cheat?"</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(score, <span class="string">" off the chart"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>还可以通过关键字<code>fallthrough</code>来使得同一个条件执行多个的<code>case</code></p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	n := <span class="number">4</span></span><br><span class="line">	<span class="keyword">switch</span> n &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">		fmt.Println(<span class="string">"is zero"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		fmt.Println(<span class="string">"is &lt;= 1"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		fmt.Println(<span class="string">"is &lt;= 2"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		fmt.Println(<span class="string">"is &lt;= 3"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		fmt.Println(<span class="string">"is &lt;= 4"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">		fmt.Println(<span class="string">"is &lt;= 5"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">		fmt.Println(<span class="string">"is &lt;= 6"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">		fmt.Println(<span class="string">"is &lt;= 7"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">		fmt.Println(<span class="string">"is &lt;= 8"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"Try again!"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>the result:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">is &lt;= <span class="number">4</span></span><br><span class="line">is &lt;= <span class="number">5</span></span><br><span class="line">is &lt;= <span class="number">6</span></span><br><span class="line">is &lt;= <span class="number">7</span></span><br><span class="line">is &lt;= <span class="number">8</span></span><br><span class="line">Try again!</span><br></pre></td></tr></table></figure></p>
<p>也可以使用<code>break</code>关键字退出<code>switch case</code><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	n := <span class="number">1</span></span><br><span class="line">	<span class="keyword">switch</span> n &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">		fmt.Println(<span class="string">"is zero"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		fmt.Println(<span class="string">"&lt;= 1"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		fmt.Println(<span class="string">"&lt;= 2"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		fmt.Println(<span class="string">"&lt;= 3"</span>)</span><br><span class="line">		<span class="keyword">if</span> time.Now().Unix()%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">"un pasito pa lante maria"</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		fmt.Println(<span class="string">"&lt;= 4"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">		fmt.Println(<span class="string">"&lt;= 5"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>the result:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;= <span class="number">1</span></span><br><span class="line">&lt;= <span class="number">2</span></span><br><span class="line">&lt;= <span class="number">3</span></span><br><span class="line">un pasito pa lante maria</span><br></pre></td></tr></table></figure></p>
<p><strong> 练习题 </strong></p>
<p>将50个硬币分给10个用户： Matthew, Sarah, Augustus, Heidi, Emilie, Peter, Giana, Adriano, Aaron, Elizabeth; 硬币根据名字中包含的元音来分配，分配规则：<br>a: 1 coin e: 1 coin i: 2 coins o: 3 coins u: 4 coins</p>
<p>并且每个用户最多不能超过10个硬币, 打印这个map, 用户的名字为<code>key</code>, 分得的硬币为<code>value</code>. 分完所以硬币之后， 应该还有两个硬币剩余.</p>
<p>预期输出结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">map[Matthew:<span class="number">2</span> Peter:<span class="number">2</span> Giana:<span class="number">4</span> Adriano:<span class="number">7</span> Elizabeth:<span class="number">5</span> Sarah:<span class="number">2</span> Augustus:<span class="number">10</span> Heidi:<span class="number">5</span> Emilie:<span class="number">6</span> Aaron:<span class="number">5</span>]</span><br><span class="line">Coins left: <span class="number">2</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">注意`Go`中的`map`是无序的，但是最终的输出结果应该跟上面是一样的.</span><br><span class="line"></span><br><span class="line">开始代码</span><br><span class="line">```golang</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">var (</span><br><span class="line">	coins = <span class="number">50</span></span><br><span class="line">	users = []string&#123;</span><br><span class="line">		<span class="string">"Matthew"</span>, <span class="string">"Sarah"</span>, <span class="string">"Augustus"</span>, <span class="string">"Heidi"</span>, <span class="string">"Emilie"</span>,</span><br><span class="line">		<span class="string">"Peter"</span>, <span class="string">"Giana"</span>, <span class="string">"Adriano"</span>, <span class="string">"Aaron"</span>, <span class="string">"Elizabeth"</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	distribution = make(map[string]int, len(users))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">	fmt.Println(distribution)</span><br><span class="line">	fmt.Println(<span class="string">"Coins left:"</span>, coins)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> 练习题解答 </strong> </p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	coins = <span class="number">50</span></span><br><span class="line">	users = []<span class="typename">string</span>&#123;</span><br><span class="line">		<span class="string">"Matthew"</span>, <span class="string">"Sarah"</span>, <span class="string">"Augustus"</span>, <span class="string">"Heidi"</span>, <span class="string">"Emilie"</span>,</span><br><span class="line">		<span class="string">"Peter"</span>, <span class="string">"Giana"</span>, <span class="string">"Adriano"</span>, <span class="string">"Aaron"</span>, <span class="string">"Elizabeth"</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	distribution = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">int</span>, <span class="built_in">len</span>(users))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	coinsForUser := <span class="keyword">func</span>(name <span class="typename">string</span>) <span class="typename">int</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> total <span class="typename">int</span></span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(name); i++ &#123;</span><br><span class="line">			<span class="keyword">switch</span> <span class="typename">string</span>(name[i]) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">"a"</span>, <span class="string">"A"</span>:</span><br><span class="line">				total++</span><br><span class="line">			<span class="keyword">case</span> <span class="string">"e"</span>, <span class="string">"E"</span>:</span><br><span class="line">				total++</span><br><span class="line">			<span class="keyword">case</span> <span class="string">"i"</span>, <span class="string">"I"</span>:</span><br><span class="line">				total = total + <span class="number">2</span></span><br><span class="line">			<span class="keyword">case</span> <span class="string">"o"</span>, <span class="string">"O"</span>:</span><br><span class="line">				total = total + <span class="number">3</span></span><br><span class="line">			<span class="keyword">case</span> <span class="string">"u"</span>, <span class="string">"U"</span>:</span><br><span class="line">				total = total + <span class="number">4</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> total</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, name := <span class="keyword">range</span> users &#123;</span><br><span class="line">		v := coinsForUser(name)</span><br><span class="line">		<span class="keyword">if</span> v &gt; <span class="number">10</span> &#123;</span><br><span class="line">			v = <span class="number">10</span></span><br><span class="line">		&#125;</span><br><span class="line">		distribution[name] = v</span><br><span class="line">		coins = coins - v</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(distribution)</span><br><span class="line">	fmt.Println(<span class="string">"Coins left:"</span>, coins)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Go&lt;/code&gt;语言中主要有三种控制流程&lt;code&gt;if&lt;/code&gt;,&lt;code&gt;for&lt;/code&gt;循环,&lt;code&gt;switch case&lt;/code&gt;语句。&lt;br&gt;
    
    </summary>
    
      <category term="go-bootcamp" scheme="http://www.grdtechs.com/categories/go-bootcamp/"/>
    
    
      <category term="golang" scheme="http://www.grdtechs.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[译]GO BOOTCAMP 第四章：集合类型</title>
    <link href="http://www.grdtechs.com/2016/01/19/go-collection-types/"/>
    <id>http://www.grdtechs.com/2016/01/19/go-collection-types/</id>
    <published>2016-01-19T09:24:38.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p><code>Go</code>集合类型包含<code>Array</code>,<code>Slice</code>,<code>Range</code>,<code>Map</code>等议题的分析和讨论。<br><a id="more"></a></p>
<h2 id="Array-_u6570_u7EC4"><a href="#Array-_u6570_u7EC4" class="headerlink" title="Array-数组"></a>Array-数组</h2><p><code>[n]T</code> 表示为一个n个数据类型为T的数组.</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="typename">int</span></span><br></pre></td></tr></table></figure>
<p>表示声明一个包含10个整数的数组变量a.<br>数组的长度是它类型的一部分，所以数组在初始化之后就不能再更改大小，不过<code>Go</code>提供了一种方便的方式来使用数组.</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">    <span class="keyword">var</span> a [<span class="number">2</span>]<span class="typename">string</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">"Hello"</span></span><br><span class="line">    a[<span class="number">1</span>] = <span class="string">"World"</span></span><br><span class="line">    fmt.Println(a[<span class="number">0</span>], a[<span class="number">1</span>])</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以在声明数组的同时初始化数组</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">    a  := [<span class="number">2</span>]<span class="typename">string</span>&#123;<span class="string">"hello"</span>, <span class="string">"world!"</span>&#125;</span><br><span class="line">    fmt.Printf(<span class="string">"%q"</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在初始化数组时，也可以使用三个省略号来代替具体指明数组的大小<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	a := [...]<span class="typename">string</span>&#123;<span class="string">"hello"</span>, <span class="string">"world!"</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">"%q"</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> 打印数组 </strong><br>之前使用<code>fmt</code>包的<code>Printf</code>函数和使用<code>%q</code>参数来打印每一个引用的元素，现在我们使用<code>Println</code>或<code>%s</code>参数来打印，将会得到不同的输出<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	a := [<span class="number">2</span>]<span class="typename">string</span>&#123;<span class="string">"hello"</span>, <span class="string">"world!"</span>&#125;</span><br><span class="line">	fmt.Println(a)</span><br><span class="line">	<span class="comment">// [hello world!]</span></span><br><span class="line">	fmt.Printf(<span class="string">"%s\n"</span>, a)</span><br><span class="line">	<span class="comment">// [hello world!]</span></span><br><span class="line">	fmt.Printf(<span class="string">"%q\n"</span>, a)</span><br><span class="line">	<span class="comment">// ["hello" "world!"]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> 多维数组 </strong><br>创建多维数组<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	<span class="keyword">var</span> a [<span class="number">2</span>][<span class="number">3</span>]<span class="typename">string</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">			a[i][j] = fmt.Sprintf(<span class="string">"row %d - column %d"</span>, i+<span class="number">1</span>, j+<span class="number">1</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">"%q"</span>, a)</span><br><span class="line">	<span class="comment">// [["row 1 - column 1" "row 1 - column 2" "row 1 - column 3"]</span></span><br><span class="line">	<span class="comment">//  ["row 2 - column 1" "row 2 - column 2" "row 2 - column 3"]]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果试图通过索引取访问或修改某个不存在的数组元素，在编译时会报错不通过<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">    <span class="keyword">var</span> a [<span class="number">2</span>]<span class="typename">string</span></span><br><span class="line">    a[<span class="number">3</span>] = <span class="string">"Hello"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当试图编译上述代码，会得到如下报错信息:</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invalid array index <span class="number">3</span> (out of bounds <span class="keyword">for</span> <span class="number">2</span>-element array)</span><br></pre></td></tr></table></figure>
<p>这是因为长度为2的数组下标索引为0或1,试图获取索引3是数组越界，所以报上述error.</p>
<p>因为在使用数组之初，通常不能确定数组的长度， 所以<code>golang</code>提供了另一种常用的数据类型<code>Slices</code>.</p>
<h2 id="Slices-_u5207_u7247"><a href="#Slices-_u5207_u7247" class="headerlink" title="Slices-切片"></a>Slices-切片</h2><p><code>Slices</code>的底层依然是一个数组，不过封装过后的它更方便用于处理数据，除了多维数组以外，在<code>Go</code>编程中大多数情况使用<code>slices</code>而不是简单的使用数组.</p>
<p><code>Slices</code>是对底层数组的一个引用，如果将一个<code>Slices</code>直接赋值给另一个<code>Slices</code>,那这两个<code>Slices</code>指向的是同一个数组. 将<code>Slices</code>通过函数形参传入，所做的修改会直接影响<code>slices</code>中的元素， 效果跟传入指针数组类似.</p>
<p><code>Slices</code>包含一个指向数组的指针和这个数组的长度值。<code>Slices</code>可以被重新定义长度，因为它们仅仅是数组的一个顶层封装.</p>
<p><code>[]T</code>表示为一个数据类型为<code>T</code>的切片.</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">    p := []<span class="typename">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line">    fmt.Println(p)</span><br><span class="line">    <span class="comment">// [2 3 5 7 11 13]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以基于现有的切片创建新的切片，表达式:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s[lo:hi]</span><br></pre></td></tr></table></figure></p>
<p>上述表达式表示创建了一个新的切片，包含的数据为现有切片数据索引<code>lo</code>到索引<code>hi</code>的范围,因此<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s[lo:lo]</span><br></pre></td></tr></table></figure></p>
<p>表示一个空的切片.<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s[lo:lo+<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p>
<p>表示有一个元素的切片.</p>
<p><code>lo</code>和<code>hi</code>是表示索引的整型整数<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	mySlice := []<span class="typename">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line">	fmt.Println(mySlice)</span><br><span class="line">	<span class="comment">// [2 3 5 7 11 13]</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(mySlice[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line">	<span class="comment">// [3 5 7]</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// missing low index implies 0</span></span><br><span class="line">	fmt.Println(mySlice[:<span class="number">3</span>])</span><br><span class="line">	<span class="comment">// [2 3 5]</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// missing high index implies len(s)</span></span><br><span class="line">	fmt.Println(mySlice[<span class="number">4</span>:])</span><br><span class="line">	<span class="comment">// [11 13]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> 声明 slices </strong><br>除了可以通过在声明右边赋值来初始化一个<code>Slices</code>外， 还可以使用关键字<code>make</code>,方便用于创建一个指定初始长度的空<code>Slices</code>.<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	cities := <span class="built_in">make</span>([]<span class="typename">string</span>, <span class="number">3</span>)</span><br><span class="line">	cities[<span class="number">0</span>] = <span class="string">"Santa Monica"</span></span><br><span class="line">	cities[<span class="number">1</span>] = <span class="string">"Venice"</span></span><br><span class="line">	cities[<span class="number">2</span>] = <span class="string">"Los Angeles"</span></span><br><span class="line">	fmt.Printf(<span class="string">"%q"</span>, cities)</span><br><span class="line">	<span class="comment">// ["Santa Monica" "Venice" "Los Angeles"]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过<code>make</code>关键字表示创建一个空数组，并返回这向这个数组的指针。</p>
<p><strong> 给slice 追加数据 </strong><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cities := []<span class="typename">string</span>&#123;&#125;</span><br><span class="line">cities[<span class="number">0</span>] = <span class="string">"Santa Monica"</span></span><br></pre></td></tr></table></figure></p>
<p>上述代码将报出一个运行时错误，因为<code>slice</code>是一个数组的引用，初始化一个长度为零的空数组时，不能直接通过<code>slice</code>给其引用的长度为0的空数组赋值。但是可以通过关键字<code>append</code>追加来做这件事情.<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	cities := []<span class="typename">string</span>&#123;&#125;</span><br><span class="line">	cities = <span class="built_in">append</span>(cities, <span class="string">"San Diego"</span>)</span><br><span class="line">	fmt.Println(cities)</span><br><span class="line">	<span class="comment">// [San Diego]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>也可以给<code>slice</code>一次<code>append</code>多个值<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	cities := []<span class="typename">string</span>&#123;&#125;</span><br><span class="line">	cities = <span class="built_in">append</span>(cities, <span class="string">"San Diego"</span>, <span class="string">"Mountain View"</span>)</span><br><span class="line">	fmt.Printf(<span class="string">"%q"</span>, cities)</span><br><span class="line">	<span class="comment">// ["San Diego" "Mountain View"]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>也可以用省略号<code>...</code>来<code>append</code>多个数据<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	cities := []<span class="typename">string</span>&#123;<span class="string">"San Diego"</span>, <span class="string">"Mountain View"</span>&#125;</span><br><span class="line">	otherCities := []<span class="typename">string</span>&#123;<span class="string">"Santa Monica"</span>, <span class="string">"Venice"</span>&#125;</span><br><span class="line">	cities = <span class="built_in">append</span>(cities, otherCities...)</span><br><span class="line">	fmt.Printf(<span class="string">"%q"</span>, cities)</span><br><span class="line">	<span class="comment">// ["San Diego" "Mountain View" "Santa Monica" "Venice"]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>省略号<code>...</code>是<code>Go</code>语言的一个内建特征，意味着这个元素是一个集合. 如果不用省略号不能给一个<code>[]string</code>直接<code>append</code>一个<code>[]string</code>, 只能<code>append</code>strings. 如果用了省略号则可以<code>append</code>,当然<code>append</code>的<code>slice</code>数据类型需要和被<code>append</code>的数据类型相同，比如就不能将<code>[]int</code>直接<code>append</code>到一个<code>[]string</code>的<code>slice</code>上。</p>
<p><strong> 长度 </strong><br>使用关键字<code>len</code>可以得到一个<code>slice</code>的长度.<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	cities := []<span class="typename">string</span>&#123;</span><br><span class="line">		<span class="string">"Santa Monica"</span>,</span><br><span class="line">		<span class="string">"San Diego"</span>,</span><br><span class="line">		<span class="string">"San Francisco"</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="built_in">len</span>(cities))</span><br><span class="line">	<span class="comment">// 3</span></span><br><span class="line">	countries := <span class="built_in">make</span>([]<span class="typename">string</span>, <span class="number">42</span>)</span><br><span class="line">	fmt.Println(<span class="built_in">len</span>(countries))</span><br><span class="line">	<span class="comment">// 42</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span><br><span class="line"></span><br><span class="line">** Nil slices ** </span><br><span class="line">空`</span>slice<span class="string">`的零值为`</span><span class="constant">nil</span><span class="string">`, 一个`</span><span class="constant">nil</span><span class="string">`的`</span>slice<span class="string">` 长度和容量都为0 </span><br><span class="line">`</span><span class="string">``</span>golang </span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">    <span class="keyword">var</span> z []<span class="typename">int</span></span><br><span class="line">    fmt.Println(z, <span class="built_in">len</span>(z), <span class="built_in">cap</span>(z))</span><br><span class="line">    <span class="comment">// [] 0 0</span></span><br><span class="line">    <span class="keyword">if</span> z == <span class="constant">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"nil!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// nil!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> 参考更多 </strong> </p>
<ul>
<li><a href="https://blog.golang.org/go-slices-usage-and-internals" target="_blank" rel="external">Go slices, usage and internals</a></li>
<li><a href="https://golang.org/doc/effective_go.html#slices" target="_blank" rel="external">Effective Go - slices</a></li>
<li><a href="https://golang.org/pkg/builtin/#append" target="_blank" rel="external">Append function documentation</a></li>
<li><a href="https://golang.org/pkg/builtin/#append" target="_blank" rel="external">Slice tricks</a></li>
<li><a href="https://golang.org/doc/effective_go.html#slices" target="_blank" rel="external">Effective Go - slices</a></li>
<li><a href="https://golang.org/doc/effective_go.html#two_dimensional_slices" target="_blank" rel="external">Effective Go - two-dimensional slices</a></li>
<li><a href="https://gobyexample.com/slices" target="_blank" rel="external">Go by example - slices</a></li>
</ul>
<h2 id="u5FAA_u73AFslice-Range"><a href="#u5FAA_u73AFslice-Range" class="headerlink" title="循环slice-Range"></a>循环slice-Range</h2><p>循环迭代<code>slice</code>或<code>map</code>, 用关键字<code>range</code>,用<code>range</code>关键字可以很方便迭代一个数据结构的所有元素.<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pow = []<span class="typename">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> pow &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"2**%d = %d\n"</span>, i, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>result:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>**<span class="number">0</span> = <span class="number">1</span></span><br><span class="line"><span class="number">2</span>**<span class="number">1</span> = <span class="number">2</span></span><br><span class="line"><span class="number">2</span>**<span class="number">2</span> = <span class="number">4</span></span><br><span class="line"><span class="number">2</span>**<span class="number">3</span> = <span class="number">8</span></span><br><span class="line"><span class="number">2</span>**<span class="number">4</span> = <span class="number">16</span></span><br><span class="line"><span class="number">2</span>**<span class="number">5</span> = <span class="number">32</span></span><br><span class="line"><span class="number">2</span>**<span class="number">6</span> = <span class="number">64</span></span><br><span class="line"><span class="number">2</span>**<span class="number">7</span> = <span class="number">128</span></span><br></pre></td></tr></table></figure></p>
<p>如果不需要<code>index</code> 则可以直接<code>_</code> 丢弃即可，如果只需要<code>index</code>,则可以不用管返回的<code>value</code>参数<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">    pow := <span class="built_in">make</span>([]<span class="typename">int</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> pow &#123;</span><br><span class="line">        pow[i] = <span class="number">1</span> &lt;&lt; <span class="typename">uint</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, value := <span class="keyword">range</span> pow &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%d\n"</span>, value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> Break &amp; continue </strong><br>可以使用<code>break</code>去stop一次迭代<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	pow := <span class="built_in">make</span>([]<span class="typename">int</span>, <span class="number">10</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> pow &#123;</span><br><span class="line">		pow[i] = <span class="number">1</span> &lt;&lt; <span class="typename">uint</span>(i)</span><br><span class="line">		<span class="keyword">if</span> pow[i] &gt;= <span class="number">16</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(pow)</span><br><span class="line">	<span class="comment">// [1 2 4 8 16 0 0 0 0 0]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>也可以使用<code>continue</code>关键字来跳过一次迭代<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	pow := <span class="built_in">make</span>([]<span class="typename">int</span>, <span class="number">10</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> pow &#123;</span><br><span class="line">		<span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		pow[i] = <span class="number">1</span> &lt;&lt; <span class="typename">uint</span>(i)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(pow)</span><br><span class="line">	<span class="comment">// [0 2 0 8 0 32 0 128 0 512]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> Range and maps </strong><br><code>range</code>关键字同样也可以用于迭代<code>map</code>, 但是返回的第一个参数值不是一个递增的索引而是<code>map</code>的<code>key</code>值.<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	cities := <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">int</span>&#123;</span><br><span class="line">		<span class="string">"New York"</span>:    <span class="number">8336697</span>,</span><br><span class="line">		<span class="string">"Los Angeles"</span>: <span class="number">3857799</span>,</span><br><span class="line">		<span class="string">"Chicago"</span>:     <span class="number">2714856</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> key, value := <span class="keyword">range</span> cities &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"%s has %d inhabitants\n"</span>, key, value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>the result:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">New York has <span class="number">8336697</span> inhabitants</span><br><span class="line">Los Angeles has <span class="number">3857799</span> inhabitants</span><br><span class="line">Chicago has <span class="number">2714856</span> inhabitants</span><br></pre></td></tr></table></figure></p>
<p><strong> 练习题 </strong><br>给定一个名字列表的<code>slices</code>, 要求将相同长度的名字，放到同一个<code>slice</code>中;输出的结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[] [] [Ava Mia] [Evan Neil Adam Matt Emma] [Emily Chloe]</span><br><span class="line">[Martin Olivia Sophia Alexis] [Katrina Madison Abigail Addison Natalie]</span><br><span class="line">[Isabella Samantha] [Elizabeth]]</span><br></pre></td></tr></table></figure></p>
<p><strong> 习题解答 </strong><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> names = []<span class="typename">string</span>&#123;<span class="string">"Katrina"</span>, <span class="string">"Evan"</span>, <span class="string">"Neil"</span>, <span class="string">"Adam"</span>, <span class="string">"Martin"</span>, <span class="string">"Matt"</span>,</span><br><span class="line">	<span class="string">"Emma"</span>, <span class="string">"Isabella"</span>, <span class="string">"Emily"</span>, <span class="string">"Madison"</span>,</span><br><span class="line">	<span class="string">"Ava"</span>, <span class="string">"Olivia"</span>, <span class="string">"Sophia"</span>, <span class="string">"Abigail"</span>,</span><br><span class="line">	<span class="string">"Elizabeth"</span>, <span class="string">"Chloe"</span>, <span class="string">"Samantha"</span>,</span><br><span class="line">	<span class="string">"Addison"</span>, <span class="string">"Natalie"</span>, <span class="string">"Mia"</span>, <span class="string">"Alexis"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	<span class="keyword">var</span> maxLen <span class="typename">int</span></span><br><span class="line">	<span class="keyword">for</span> _, name := <span class="keyword">range</span> names &#123;</span><br><span class="line">		<span class="keyword">if</span> l := <span class="built_in">len</span>(name); l &gt; maxLen &#123;</span><br><span class="line">			maxLen = l</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	output := <span class="built_in">make</span>([][]<span class="typename">string</span>, maxLen)</span><br><span class="line">	<span class="keyword">for</span> _, name := <span class="keyword">range</span> names &#123;</span><br><span class="line">		output[<span class="built_in">len</span>(name)-<span class="number">1</span>] = <span class="built_in">append</span>(output[<span class="built_in">len</span>(name)-<span class="number">1</span>], name)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">"%v"</span>, output)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>为了避免插入越界, 需要申请一个足够大的<code>slice</code>,但是并不需要申请一个过于大的<code>slice</code>,这是为什么我们首选获得最长的<code>name</code>的<code>length</code>, 并且以这个<code>length</code>作为输出<code>slice</code>的长度.因为<code>slice</code>是从索引0开始的，所以插入时需要获取<code>name</code>的长度减一。</li>
</ul>
<h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><p><code>Go</code>语言中的<code>Map</code>数据结构类似于其它语言中的<code>字典</code>或<code>hashes</code>。<br>一个<code>Map</code>就是一个<code>key-values</code>值对，下面将演员的名字作为<code>Map</code>的<code>key</code>, 年龄作为<code>Map</code>的<code>values</code>.<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	celebs := <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">int</span>&#123;</span><br><span class="line">		<span class="string">"Nicolas Cage"</span>:       <span class="number">50</span>,</span><br><span class="line">		<span class="string">"Selena Gomez"</span>:       <span class="number">21</span>,</span><br><span class="line">		<span class="string">"Jude Law"</span>:           <span class="number">41</span>,</span><br><span class="line">		<span class="string">"Scarlett Johansson"</span>: <span class="number">29</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">"%#v"</span>, celebs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>the result:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">int</span>&#123;<span class="string">"Nicolas Cage"</span>:<span class="number">50</span>, <span class="string">"Selena Gomez"</span>:<span class="number">21</span>, <span class="string">"Jude Law"</span>:<span class="number">41</span>,</span><br><span class="line">    <span class="string">"Scarlett Johansson"</span>:<span class="number">29</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Map</code>在使用前，必需先用<code>make</code>关键字初始化，否在不能使用，也不能添加值.<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	Lat, Long <span class="typename">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="typename">string</span>]Vertex</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="typename">string</span>]Vertex)</span><br><span class="line">	m[<span class="string">"Bell Labs"</span>] = Vertex&#123;<span class="number">40.68433</span>, -<span class="number">74.39967</span>&#125;</span><br><span class="line">	fmt.Println(m[<span class="string">"Bell Labs"</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在使用<code>Map</code>，如果顶层类型只是一个类型名，那么在初始化赋值时可以省略它<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	Lat, Long <span class="typename">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="typename">string</span>]Vertex&#123;</span><br><span class="line">	<span class="string">"Bell Labs"</span>: &#123;<span class="number">40.68433</span>, -<span class="number">74.39967</span>&#125;,</span><br><span class="line">	<span class="comment">// same as "Bell Labs": Vertex&#123;40.68433, -74.39967&#125;</span></span><br><span class="line">	<span class="string">"Google"</span>: &#123;<span class="number">37.42202</span>, -<span class="number">122.08408</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	fmt.Println(m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> Maps基本操作 </strong><br>插入或更新<code>map</code>中的元素<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m[key]=elem</span><br></pre></td></tr></table></figure></p>
<p>获取元素<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elem=m[key]</span><br></pre></td></tr></table></figure></p>
<p>删除一个元素<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">delete</span>(m,key)</span><br></pre></td></tr></table></figure></p>
<p>测试是否存在某个值<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elem, ok = m[key]</span><br></pre></td></tr></table></figure></p>
<p>如果<code>m</code>中存在<code>key</code>,  则<code>ok</code>返回<code>true</code> ,否则返回<code>false</code>表示不存在,并且<code>elem</code>是<code>map</code>相应数据类型的零值.</p>
<p><strong> 参考更多 </strong></p>
<ul>
<li><a href="https://blog.golang.org/go-maps-in-action" target="_blank" rel="external">Go team blog post on maps</a></li>
<li><a href="https://golang.org/doc/effective_go.html#maps" target="_blank" rel="external">Effective Go - maps</a></li>
</ul>
<p><strong> 练习题  </strong><br>实现单词统计<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"code.google.com/p/go-tour/wc"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> WordCount(s <span class="typename">string</span>) <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">int</span>&#123;<span class="string">"x"</span>: <span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">    wc.Test(WordCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>应该返回一个<code>map</code>,包含每个单词的长度值和单词的映像关系.</p>
<p><strong> 解决方案 </strong><br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"code.google.com/p/go-tour/wc"</span></span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> WordCount(s <span class="typename">string</span>) <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">int</span> &#123;</span><br><span class="line">	words := strings.Fields(s)</span><br><span class="line">	count := <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">int</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> _, word := <span class="keyword">range</span> words &#123;</span><br><span class="line">		count[word]++</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	wc.Test(WordCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Go&lt;/code&gt;集合类型包含&lt;code&gt;Array&lt;/code&gt;,&lt;code&gt;Slice&lt;/code&gt;,&lt;code&gt;Range&lt;/code&gt;,&lt;code&gt;Map&lt;/code&gt;等议题的分析和讨论。&lt;br&gt;
    
    </summary>
    
      <category term="go-bootcamp" scheme="http://www.grdtechs.com/categories/go-bootcamp/"/>
    
    
      <category term="golang" scheme="http://www.grdtechs.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[译]GO BOOTCAMP 第三章：内置类型实战</title>
    <link href="http://www.grdtechs.com/2016/01/17/go-types/"/>
    <id>http://www.grdtechs.com/2016/01/17/go-types/</id>
    <published>2016-01-17T21:36:28.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p><code>Go</code>内置类型实战，包括类型转换，类型断言，结构类型，结构继承等内容。<br><a id="more"></a></p>
<h2 id="u57FA_u672C_u7C7B_u578B"><a href="#u57FA_u672C_u7C7B_u578B" class="headerlink" title="基本类型"></a>基本类型</h2><p><code>Go</code>语言主要有如下内置基本类型，<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="typename">bool</span></span><br><span class="line"><span class="typename">string</span></span><br><span class="line"></span><br><span class="line">Numeric types:</span><br><span class="line"></span><br><span class="line"><span class="typename">uint</span>        either <span class="number">32</span> or <span class="number">64</span> bits</span><br><span class="line"><span class="typename">int</span>         same size as <span class="typename">uint</span></span><br><span class="line"><span class="typename">uintptr</span>     an unsigned integer large enough to store the uninterpreted bits of</span><br><span class="line">            a pointer value</span><br><span class="line"><span class="typename">uint8</span>       the set of all unsigned  <span class="number">8</span>-bit integers (<span class="number">0</span> to <span class="number">255</span>)</span><br><span class="line"><span class="typename">uint16</span>      the set of all unsigned <span class="number">16</span>-bit integers (<span class="number">0</span> to <span class="number">65535</span>)</span><br><span class="line"><span class="typename">uint32</span>      the set of all unsigned <span class="number">32</span>-bit integers (<span class="number">0</span> to <span class="number">4294967295</span>)</span><br><span class="line"><span class="typename">uint64</span>      the set of all unsigned <span class="number">64</span>-bit integers (<span class="number">0</span> to <span class="number">18446744073709551615</span>)</span><br><span class="line"></span><br><span class="line"><span class="typename">int8</span>        the set of all signed  <span class="number">8</span>-bit integers (-<span class="number">128</span> to <span class="number">127</span>)</span><br><span class="line"><span class="typename">int16</span>       the set of all signed <span class="number">16</span>-bit integers (-<span class="number">32768</span> to <span class="number">32767</span>)</span><br><span class="line"><span class="typename">int32</span>       the set of all signed <span class="number">32</span>-bit integers (-<span class="number">2147483648</span> to <span class="number">2147483647</span>)</span><br><span class="line"><span class="typename">int64</span>       the set of all signed <span class="number">64</span>-bit integers</span><br><span class="line">            (-<span class="number">9223372036854775808</span> to <span class="number">9223372036854775807</span>)</span><br><span class="line"></span><br><span class="line"><span class="typename">float32</span>     the set of all IEEE-<span class="number">754</span> <span class="number">32</span>-bit floating-point numbers</span><br><span class="line"><span class="typename">float64</span>     the set of all IEEE-<span class="number">754</span> <span class="number">64</span>-bit floating-point numbers</span><br><span class="line"></span><br><span class="line"><span class="typename">complex64</span>   the set of all <span class="built_in">complex</span> numbers with <span class="typename">float32</span> <span class="built_in">real</span> and imaginary parts</span><br><span class="line"><span class="typename">complex128</span>  the set of all <span class="built_in">complex</span> numbers with <span class="typename">float64</span> <span class="built_in">real</span> and imaginary parts</span><br><span class="line"></span><br><span class="line"><span class="typename">byte</span>        alias <span class="keyword">for</span> <span class="typename">uint8</span></span><br><span class="line"><span class="typename">rune</span>        alias <span class="keyword">for</span> <span class="typename">int32</span> (represents a Unicode code point)</span><br></pre></td></tr></table></figure></p>
<p>内置类型基本使用示例，<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"math/cmplx"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	goIsFun <span class="typename">bool</span>       = <span class="constant">true</span></span><br><span class="line">	maxInt  <span class="typename">uint64</span>     = <span class="number">1</span>&lt;&lt;<span class="number">64</span> - <span class="number">1</span></span><br><span class="line">	<span class="built_in">complex</span> <span class="typename">complex128</span> = cmplx.Sqrt(-<span class="number">5</span> + <span class="number">12i</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	<span class="keyword">const</span> f = <span class="string">"%T(%v)\n"</span></span><br><span class="line">	fmt.Printf(f, goIsFun, goIsFun)</span><br><span class="line">	fmt.Printf(f, maxInt, maxInt)</span><br><span class="line">	fmt.Printf(f, <span class="built_in">complex</span>, <span class="built_in">complex</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bool(<span class="literal">true</span>)</span><br><span class="line">uint64(<span class="number">18446744073709551615</span>)</span><br><span class="line">complex128((<span class="number">2</span>+<span class="number">3</span>i))</span><br></pre></td></tr></table></figure></p>
<h2 id="u7C7B_u578B_u8F6C_u6362"><a href="#u7C7B_u578B_u8F6C_u6362" class="headerlink" title="类型转换"></a>类型转换</h2><p><code>T(v)</code>表示将<code>v</code>的类型转换为<code>T</code>类型，一些数值类型转换如下，<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="typename">int</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> f <span class="typename">float64</span> = <span class="typename">float64</span>(i)</span><br><span class="line"><span class="keyword">var</span> u <span class="typename">uint</span> = <span class="typename">uint</span>(f)</span><br></pre></td></tr></table></figure></p>
<p>简化一下,<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">42</span></span><br><span class="line">f := <span class="typename">float64</span>(i)</span><br><span class="line">u := <span class="typename">uint</span>(f)</span><br></pre></td></tr></table></figure></p>
<p><code>Go</code>语言中不同类型之间需要显示转换才能相互赋值，如传入的参数类型与函数接收的参数不同时，需要手动进行类型转换才能传入。<br><strong>译者注:</strong> <code>Go</code>语言中除了<code>byte</code>和<code>uint8</code>之间以及<code>rune</code>和<code>int32</code>之间可以相互进行赋值操作外，其它不同类型直接都需要显示转换才能进行相互赋值操作。 如,<br>    <figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="typename">byte</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> u <span class="typename">uint8</span> </span><br><span class="line">u = i <span class="comment">// 可以直接赋值，不需显示转换 ，同样rune 与 int32 之间也是一样的。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="typename">int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> f <span class="typename">float64</span> = <span class="typename">float64</span>(i) <span class="comment">//这里需要显示将 int 转换float64 才能赋值成功!</span></span><br></pre></td></tr></table></figure></p>
<h2 id="u7C7B_u578B_u65AD_u8A00"><a href="#u7C7B_u578B_u65AD_u8A00" class="headerlink" title="类型断言"></a>类型断言</h2><p>如果想判断一个变量的数据类型,或将当前类型(如 interface{})作相应的类型判断,可以借助类型断言来解决。类型断言试图将当前变量转换为指定的数据类型，并返回转换之后相应的指针对象（如果转换成功）及是否转换成功的标志值。下面示例中，<code>timeMap</code>函数接受一个变量，并断言这个变量类型是否为<code>map[string]interface{}</code>类型，如果是则为其初始化一个<code>key</code>为<code>updated_at</code>,<code>value</code>为<code>time.Now()</code>的值对。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> timeMap(y <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">	z, ok := y.(<span class="keyword">map</span>[<span class="typename">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	<span class="keyword">if</span> ok &#123;</span><br><span class="line">		z[<span class="string">"updated_at"</span>] = time.Now()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	foo := <span class="keyword">map</span>[<span class="typename">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">		<span class="string">"Matt"</span>: <span class="number">42</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	timeMap(foo)</span><br><span class="line">		fmt.Println(foo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Go</code>语言并不对空接口<code>interface{}</code>进行类型断言，如果函数内部如对不同类型参数会作出不同的处理，则通常需借助类型断言来完成，如：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123;</span><br><span class="line">	String() <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> fakeString <span class="keyword">struct</span> &#123;</span><br><span class="line">	content <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (s *fakeString) String() <span class="typename">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> s.content</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> printString(value <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">	<span class="keyword">switch</span> str := value.(<span class="keyword">type</span>) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="typename">string</span>:</span><br><span class="line">		fmt.Println(str)</span><br><span class="line">	<span class="keyword">case</span> Stringer:</span><br><span class="line">		fmt.Println(str.String())</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果给<code>printString</code>传入一个<code>fakeString</code>,因为<code>fakeString</code>实现了<code>Stringer</code>方法，那么<code>printString</code>中会处理<code>Stringer</code>这个case,如果直接传入一个字符串给<code>printString</code>，则显然会处理<code>string</code>这个case 从而直接输出传入的字符串。<br><a href="https://github.com/researchlab/go-bootcamp/blob/master/ch03/type_assertion.go" target="_blank" rel="external">示例代码</a><br>类型断言也可以用于判断具体的<code>error</code>类型，如:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="constant">nil</span> &#123;</span><br><span class="line">	  <span class="keyword">if</span> msqlerr, ok := err.(*mysql.MySQLError); ok &amp;&amp; msqlerr.Number == <span class="number">1062</span> &#123;</span><br><span class="line">	    	log.Println(<span class="string">"We got a MySQL duplicate :("</span>)</span><br><span class="line">	   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		    <span class="keyword">return</span> err</span><br><span class="line">	   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="u7ED3_u6784"><a href="#u7ED3_u6784" class="headerlink" title="结构"></a>结构</h2><p><code>struct</code>是多个字段或属性的集合，用户也可以自定义一个像<code>struct</code>或<code>interface</code>这样的数据类型。如果你学过面向对象编程，你可以将<code>struct</code>理解为一个轻量级的<code>class</code>支持字段属性的集合，但不支持继承。<code>struct</code>中默认提供<code>get</code>和<code>set</code>方法，需要注意的是只有首字母大写的<code>struct</code>变量才能被包访问。<code>struct</code>可以通过<code>Name:</code>后跟初始值来初始化<code>struct</code>,这样初始化时可以不按<code>struct</code>中字段声明的顺序进行初始化，如果在<code>struct</code>变量前加上<code>&amp;</code>符号，返回的是一个指向这个<code>struct</code>的指针对象。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bootcamp <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// Latitude of the event</span></span><br><span class="line">	Lat <span class="typename">float64</span></span><br><span class="line">	<span class="comment">// Longitude of the event</span></span><br><span class="line">	Lon <span class="typename">float64</span></span><br><span class="line">	<span class="comment">// Date of the event</span></span><br><span class="line">	Date time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	fmt.Println(Bootcamp&#123;</span><br><span class="line">		Lat:  <span class="number">34.012836</span>,</span><br><span class="line">		Lon:  -<span class="number">118.495338</span>,</span><br><span class="line">		Date: time.Now(),</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>声明并初始化<code>struct</code>对象，<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</span><br><span class="line">	X, Y <span class="typename">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	p = Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;  <span class="comment">// 初始化一个Point对象</span></span><br><span class="line">	q = &amp;Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// 初始化一个Point指针对象</span></span><br><span class="line">	r = Point&#123;X: <span class="number">1</span>&#125;  <span class="comment">// Y值默认为0 </span></span><br><span class="line">	s = Point&#123;&#125;      <span class="comment">// X和Y的值都默认为0</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	fmt.Println(p, q, r, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/researchlab/go-bootcamp/blob/master/ch03/declaration_struct.go" target="_blank" rel="external">示例代码</a></p>
<p>可通过<code>.</code>符号访问<code>struct</code>中的成员变量，<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bootcamp <span class="keyword">struct</span> &#123;</span><br><span class="line">	Lat, Lon <span class="typename">float64</span></span><br><span class="line">	Date     time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	event := Bootcamp&#123;</span><br><span class="line">		Lat: <span class="number">34.012836</span>,</span><br><span class="line">		Lon: -<span class="number">118.495338</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	event.Date = time.Now()</span><br><span class="line">	fmt.Printf(<span class="string">"Event on %s, location (%f, %f)"</span>,event.Date, event.Lat, event.Lon)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/researchlab/go-bootcamp/blob/master/ch03/access_struct_field.go" target="_blank" rel="external">示例代码</a></p>
<h2 id="u521D_u59CB_u5316"><a href="#u521D_u59CB_u5316" class="headerlink" title="初始化"></a>初始化</h2><p><code>Go</code>支持用<code>new</code>表达式初始化变量，分配一个类型零值并返回指向这个类型的指针给变量。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x := <span class="built_in">new</span>(<span class="typename">int</span>)</span><br></pre></td></tr></table></figure></p>
<p>一种常见的初始化一个包含<code>struct</code>或引用变量的方法是创建一个<code>struct</code>字段。另一种方法是通过创建构造函数来完成初始化操作。这两种方法是当需要自定义初始化字段值常用的两种方法。下面用<code>new</code>方法和用空<code>struct</code>字段初始化一个<code>struct</code>是等价的，如:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bootcamp <span class="keyword">struct</span> &#123;</span><br><span class="line">	Lat <span class="typename">float64</span></span><br><span class="line">	Lon <span class="typename">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	x := <span class="built_in">new</span>(Bootcamp)</span><br><span class="line">	y := &amp;Bootcamp&#123;&#125;</span><br><span class="line">	fmt.Println(*x == *y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面<code>x</code>和<code>y</code>的初始化操作是等价的；后面要接触的<code>slices</code>，<code>maps</code>和<code>channels</code>结构初始化一般需要自定义初始化字段如长度，容量等，所以这些结构通常用<code>make</code>关键字来初始化操作。</p>
<h2 id="u7EC4_u5408vs_u7EE7_u627F"><a href="#u7EC4_u5408vs_u7EE7_u627F" class="headerlink" title="组合vs继承"></a>组合vs继承</h2><p><code>Go</code>不支持面向对象编程中的继承操作，但是可以使用组合和接口来完成继承的操作。<code>Go</code>支持<code>OOP</code>中的组合（或者说绑定）操作。下面是一个关于地址操作的示例:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id       <span class="typename">int</span></span><br><span class="line">	Name     <span class="typename">string</span></span><br><span class="line">	Location <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Player <span class="keyword">struct</span> &#123;</span><br><span class="line">	User</span><br><span class="line">	GameId   <span class="typename">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	p := Player&#123;&#125;</span><br><span class="line">	p.Id = <span class="number">42</span></span><br><span class="line">	p.Name = <span class="string">"Matt"</span></span><br><span class="line">	p.Location = <span class="string">"LA"</span></span><br><span class="line">	p.GameId = <span class="number">90404</span></span><br><span class="line">	fmt.Printf(<span class="string">"%+v"</span>, p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/researchlab/go-bootcamp/blob/master/ch03/composition_case.go" target="_blank" rel="external">示例代码</a><br>上面地址的案例是一个经典的<code>OOP</code>例子，现在考虑到<code>Player</code> struct和<code>User</code>struct有相同的字段，但是<code>Player</code>还有一个自己的<code>GameId</code>字段，用<code>OOP</code>思想则声明<code>Player</code>和<code>User</code>struct，会存在重复声明相同的字段，但是在<code>Go</code>中可以通过组合<code>struct</code>来简化这样的情况,<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id             <span class="typename">int</span></span><br><span class="line">	Name, Location <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Player <span class="keyword">struct</span> &#123;</span><br><span class="line">	User</span><br><span class="line">	GameId <span class="typename">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在可通过两种方法来初始化一个<code>Player</code>结构。第一种使用<code>.</code>来设置<code>struct</code>字段,<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id             <span class="typename">int</span></span><br><span class="line">	Name, Location <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Player <span class="keyword">struct</span> &#123;</span><br><span class="line">	User</span><br><span class="line">	GameId <span class="typename">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	p := Player&#123;&#125;</span><br><span class="line">	p.Id = <span class="number">42</span></span><br><span class="line">	p.Name = <span class="string">"Matt"</span></span><br><span class="line">	p.Location = <span class="string">"LA"</span></span><br><span class="line">	p.GameId = <span class="number">90404</span></span><br><span class="line">	fmt.Printf(<span class="string">"%+v"</span>, p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>另一种初始化方法是使用<code>struct</code>字段初始化语法<code>Name:</code>来初始化，<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id             <span class="typename">int</span></span><br><span class="line">	Name, Location <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Player <span class="keyword">struct</span> &#123;</span><br><span class="line">	User</span><br><span class="line">	GameId <span class="typename">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	p := Player&#123;</span><br><span class="line">	User&#123;Id: <span class="number">42</span>, Name: <span class="string">"Matt"</span>, Location: <span class="string">"LA"</span>&#125;,<span class="number">90404</span>,&#125;</span><br><span class="line">	fmt.Printf(<span class="string">"Id: %d, Name: %s, Location: %s, Game id: %d\n"</span>,	p.Id, p.Name, p.Location, p.GameId)</span><br><span class="line">	<span class="comment">// Directly set a field define on the Player struct</span></span><br><span class="line">	p.Id = <span class="number">11</span></span><br><span class="line">	fmt.Printf(<span class="string">"%+v"</span>, p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当需要调用匿名结构中的字段时，不能直接引用相应的字段，而是需要通过当前结构对象来调用，如<code>User</code>作为匿名结构嵌入在<code>Player</code>中，所以通过<code>Player</code>对象能调用到<code>User</code>中到字段，但是不能直接通过<code>User</code>中到字段名去调用，示例如:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id             <span class="typename">int</span></span><br><span class="line">	Name, Location <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (u *User) Greetings() <span class="typename">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">"Hi %s from %s"</span>,u.Name, u.Location)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Player <span class="keyword">struct</span> &#123;</span><br><span class="line">	User</span><br><span class="line">	GameId <span class="typename">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	p := Player&#123;&#125;</span><br><span class="line">	p.Id = <span class="number">42</span></span><br><span class="line">	p.Name = <span class="string">"Matt"</span></span><br><span class="line">	p.Location = <span class="string">"LA"</span></span><br><span class="line">	fmt.Println(p.Greetings())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过当前结构体对象引用嵌入到匿名结构体中的字段对构建数据结构非常有效，当嵌入对匿名结构实现了某个接口，那当前结构也就自动实现了这个接口了。下面来看另一个示例，<code>Job</code>结构中嵌入了<code>Logger</code>结构，那相当于<code>Job</code>也实现了<code>Logger</code>实现的了日志接口，如：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Job <span class="keyword">struct</span> &#123;</span><br><span class="line">	Command <span class="typename">string</span></span><br><span class="line">	Logger  *log.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	job := &amp;Job&#123;<span class="string">"demo"</span>, log.New(os.Stderr, <span class="string">"Job: "</span>, log.Ldate)&#125;</span><br><span class="line">	<span class="comment">// 也可这样初始化job</span></span><br><span class="line">	<span class="comment">// job := &amp;Job&#123;Command: "demo",</span></span><br><span class="line">    <span class="comment">//       Logger: log.New(os.Stderr, "Job: ", log.Ldate)&#125;</span></span><br><span class="line">	job.Logger.Print(<span class="string">"test"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Job</code>结构中有个字段<code>Logger</code>是一个指向<code>log.Logger</code>类型的指针，在初始化值之后，则<code>Job</code>对象就可以通过这样来调用<code>log.Logger</code>实现的<code>Print</code>函数了，<code>job.Logger.Print()</code>。既然<code>Logger</code>本身是一个指向<code>log.Logger</code>类型的指针，那我们直接在<code>Job</code>结构中嵌入一个<code>log.Logger</code>指针对象，那<code>Job</code>结构对象不就可以直接调用<code>job.Logger</code>实现的<code>Print</code>方法？ 答案是可以的， 如:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Job <span class="keyword">struct</span> &#123;</span><br><span class="line">	Command <span class="typename">string</span></span><br><span class="line">	*log.Logger <span class="comment">//嵌入匿名指针类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	job := &amp;Job&#123;<span class="string">"demo"</span>, log.New(os.Stderr, <span class="string">"Job: "</span>, log.Ldate)&#125;</span><br><span class="line">	job.Print(<span class="string">"starting now..."</span>) <span class="comment">//直接调用log.Logger实现的Print()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意在使用<code>log.Logger</code>之前需要初始化，如果匿名结构实现了某个接口，也相当于使嵌入这个匿名结构的当前结构也实现了这个接口，非常方便高效。</p>
<h2 id="u6848_u4F8B_u5206_u6790"><a href="#u6848_u4F8B_u5206_u6790" class="headerlink" title="案例分析"></a>案例分析</h2><p>在<code>Go</code>中参数是默认是值传递,所以从上述<code>User/Player</code>示例中，你可能注意到在<code>Player</code>结构中嵌入<code>User</code>结构指针比直接嵌入<code>User</code>结构对象更好。确实如果嵌入到结构体比较简单时，使用哪种方法都差不多，如果像现实中<code>User</code>结构其实非常复杂，那选择传入引用则是更好到选择。修改上述代码如：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id             <span class="typename">int</span></span><br><span class="line">	Name, Location <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (u *User) Greetings() <span class="typename">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">"Hi %s from %s"</span>,u.Name, u.Location)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Player <span class="keyword">struct</span> &#123;</span><br><span class="line">	*User</span><br><span class="line">	GameId <span class="typename">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上述将代码修改为嵌入<code>User</code>指针，那在调用<code>User</code>中字段之后，需要对<code>User</code>先初始化，详情看<a href="https://github.com/researchlab/go-bootcamp/blob/master/ch03/pass_ptr.go" target="_blank" rel="external">示例代码</a></p>
<ul>
<li>Question: 为<code>User</code>结构指针类型定义一个<code>Greetings</code>方法，如何直接去调用它呢？</li>
<li>Solution:<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id             <span class="typename">int</span></span><br><span class="line">	Name, Location <span class="typename">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> (u *User) Greetings() <span class="typename">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">"Hi %s from %s"</span>,u.Name, u.Location)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Player <span class="keyword">struct</span> &#123;</span><br><span class="line">	*User</span><br><span class="line">	GameId <span class="typename">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> NewPlayer(id <span class="typename">int</span>, name, location <span class="typename">string</span>, gameId <span class="typename">int</span>) *Player &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;Player&#123;</span><br><span class="line">		User:   &amp;User&#123;id, name, location&#125;,</span><br><span class="line">		GameId: gameId,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	p := NewPlayer(<span class="number">42</span>, <span class="string">"Matt"</span>, <span class="string">"LA"</span>, <span class="number">90404</span>)</span><br><span class="line">	fmt.Println(p.Greetings())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>上述案例通过<code>NewPlayer</code>方法在使用<code>User</code>中的<code>Greetings</code>前，先初始化了<code>User</code>结构指针,如果在使用前不初始化，则调用<code>Greetings</code>时，是用一个<code>nil ptr</code>去调用<code>Greetings</code>，显然这样调用不成功，所以使用前需要先初始化，得到返回指向这个匿名对象的地址指针对象，才能进一步通过这个指针对象去调用匿名结构中的字段属性。</p>
<p><strong> 《GO BOOTCAMP》第三章翻译完成，原著第三章出处：<a href="http://www.golangbootcamp.com/book/types" target="_blank" rel="external">Chapter 3 Types</a> </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Go&lt;/code&gt;内置类型实战，包括类型转换，类型断言，结构类型，结构继承等内容。&lt;br&gt;
    
    </summary>
    
      <category term="go-bootcamp" scheme="http://www.grdtechs.com/categories/go-bootcamp/"/>
    
    
      <category term="golang" scheme="http://www.grdtechs.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[译]GO BOOTCAMP 第二章：基本概念实战</title>
    <link href="http://www.grdtechs.com/2016/01/16/go-basics/"/>
    <id>http://www.grdtechs.com/2016/01/16/go-basics/</id>
    <published>2016-01-16T16:54:06.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>如果已经有一定的编程基础，那你只需花几个小时就能学会<code>Go</code>编程，因此<code>Go</code>也常被认为是一门“简单易用”的编程语言。Go语言被设计得尽量简洁，它的整个语言规范也一样。在写第一个<code>Go</code>应用之前，我们先来学习<code>Go</code>的一些基础概念。<br><a id="more"></a></p>
<h2 id="u53D8_u91CF_u53CA_u7C7B_u578B_u63A8_u65AD"><a href="#u53D8_u91CF_u53CA_u7C7B_u578B_u63A8_u65AD" class="headerlink" title="变量及类型推断"></a>变量及类型推断</h2><p>用<code>var</code>关键字声明一个变量列表，其中变量的数据类型Type放在变量名的后面，如:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>(</span><br><span class="line">	name <span class="typename">string</span></span><br><span class="line">	age <span class="typename">int</span></span><br><span class="line">	location <span class="typename">string</span>	</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>或着将相同类型的变量写在一行并用逗号隔开,<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>(</span><br><span class="line">	name, location <span class="typename">string</span></span><br><span class="line">	age <span class="typename">int</span>	</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>也可以一个一个的声明变量,<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="typename">string</span></span><br><span class="line"><span class="keyword">var</span> age <span class="typename">int</span> </span><br><span class="line"><span class="keyword">var</span> location <span class="typename">string</span></span><br></pre></td></tr></table></figure></p>
<p>也可在<code>var</code>关键字声明的变量列表中初始化变量，<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>(</span><br><span class="line">	name <span class="typename">string</span> = <span class="string">"Prince Oberyn"</span></span><br><span class="line">	age <span class="typename">int</span> = <span class="number">32</span></span><br><span class="line">	location <span class="typename">string</span> = <span class="string">"Dorne"</span>	</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>也可以向下面这样声明初始化变量,<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	name, location, age = <span class="string">"Prince Oberyn"</span>, <span class="string">"Dorne"</span>, <span class="number">32</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>在函数内部可以直接用短赋值符号<code>:=</code>来隐式的声明初始化变量，但是这种短赋值符号只能用于声明局部变量，即只能在函数体内使用,如:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	name, location := <span class="string">"Prince Oberyn"</span>, <span class="string">"Dorne"</span></span><br><span class="line">	age := <span class="number">32</span></span><br><span class="line">	fmt.Printf(<span class="string">"%s (%d) of %s"</span>, name, age, location)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/researchlab/go-bootcamp/blob/master/ch02/short_assign_case.go" target="_blank" rel="external">示例代码</a><br>在<code>Go</code>语言中，一个变量可以是任意类型，甚至可以将一个函数赋值给一个变量,如:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	action := <span class="keyword">func</span>() &#123;</span><br><span class="line">		<span class="comment">//doing something</span></span><br><span class="line">	&#125;</span><br><span class="line">	action()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>注意:</strong> 短赋值符号<code>:=</code>只能用来隐式初始化局部变量，不能在函数体外部使用。</p>
<h2 id="u5E38_u91CF"><a href="#u5E38_u91CF" class="headerlink" title="常量"></a>常量</h2><p>在<code>Go</code>语言中，用<code>const</code>关键字声明常量。常量只能是字符，字符串，布尔值或数值。常量初始化可以通过上下文推断它的类型，但是不能使用短赋值符号<code>:=</code>对常量进行声明初始化操作，如:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Pi = <span class="number">3.14</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">		StatusOK                   = <span class="number">200</span></span><br><span class="line">		StatusCreated              = <span class="number">201</span></span><br><span class="line">		StatusAccepted             = <span class="number">202</span></span><br><span class="line">		StatusNonAuthoritativeInfo = <span class="number">203</span></span><br><span class="line">		StatusNoContent            = <span class="number">204</span></span><br><span class="line">		StatusResetContent         = <span class="number">205</span></span><br><span class="line">		StatusPartialContent       = <span class="number">206</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	Pi    = <span class="number">3.14</span></span><br><span class="line">	Truth = <span class="constant">false</span></span><br><span class="line">	Big   = <span class="number">1</span> &lt;&lt; <span class="number">100</span></span><br><span class="line">	Small = Big &gt;&gt; <span class="number">99</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	<span class="keyword">const</span> Greeting = <span class="string">"ハローワールド"</span></span><br><span class="line">	fmt.Println(Greeting)</span><br><span class="line">	fmt.Println(Pi)</span><br><span class="line">	fmt.Println(Truth)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/researchlab/go-bootcamp/blob/master/ch02/constant_declared.go" target="_blank" rel="external">示例代码</a></p>
<h2 id="u6253_u5370_u5E38_u91CF_u548C_u53D8_u91CF"><a href="#u6253_u5370_u5E38_u91CF_u548C_u53D8_u91CF" class="headerlink" title="打印常量和变量"></a>打印常量和变量</h2><p>你可以灵活的使用<code>fmt</code>包提供的<code>print</code>和<code>println</code>函数打印一个常量或变量的值,如:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	cylonModel := <span class="number">6</span></span><br><span class="line">	fmt.Println(cylonModel)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可用<code>fmt.Println</code>换行打印变量，如果要按指定的输出格式打印一个或多个值变量时可以用<code>fmt.Printf</code>函数,如:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	name := <span class="string">"Caprica-Six"</span></span><br><span class="line">	aka := fmt.Sprintf(<span class="string">"Number %d"</span>, <span class="number">6</span>)</span><br><span class="line">	fmt.Printf(<span class="string">"%s is also known as %s"</span>,name, aka)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="u5305_u548C_u5F15_u5165"><a href="#u5305_u548C_u5F15_u5165" class="headerlink" title="包和引入"></a>包和引入</h2><p>每个<code>Go</code>程序都是由<code>packages</code>组成的，并且以<code>main</code>包为程序的运行入口，如:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"Hello,World!\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果写一个可执行程序（相对于库）,那需要定义一个<code>main</code> 包的<code>go</code>文件，<code>main</code>包中的<code>main</code>函数就是执行程序的入口。按惯例，包名是相同的导入路径的最后一个元素。例如，引入路径<code>math/rand</code>，是指引入<code>math/</code>路径下的<code>rand</code>包。<br>引入包示例:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/rand"</span></span><br></pre></td></tr></table></figure></p>
<p>或着引入一个包组:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"math/rand"</span>	</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>通常，非标准库包使用一个<code>web url</code>作为命名空间，如我将<code>Rails 4</code>中使用的一些用于加密的代码和逻辑移植到<code>Go</code>中，然后将代码包托管到<code>github</code>的<code>repository</code>上，如:<a href="/">http://github.com/mattetti/goRailsYourself</a><br> 那现在可以通过下面的方式来引入提交的这个加密包<code>crypto package</code>:<br> <figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"github.com/mattetti/goRailsYourself/crypto"</span></span><br></pre></td></tr></table></figure></p>
<h2 id="u4EE3_u7801_u4F4D_u7F6E"><a href="#u4EE3_u7801_u4F4D_u7F6E" class="headerlink" title="代码位置"></a>代码位置</h2><p>上面的代码片段只是简单的告诉编译器可以在<strong>github.com/mattetti/goRailsYourself/crypto</strong>路径下获得<code>crypto</code>这个包，但并不意味着编译器会自动去<code>github</code>仓库中把这个代码拉下来，那到哪里去找到这个<code>crypto</code>代码包呢？<br>你需要自己去把代码拉下来，最简单的方法是使用<code>Go</code>提供的<code>go get</code>命令,<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/mattetti/goRailsYourself/crypto</span><br></pre></td></tr></table></figure></p>
<p>当安装<code>Go</code>时，我们需要设置<code>GOPATH</code>环境变量, 这个是用来指明二进制执行程序，库文件和你自己代码的存放位置的。执行<code>go get</code>命令，它会把相应的包文件下载到<code>GOPATH</code>指定到路径下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls <span class="variable">$GOPATH</span></span><br><span class="line">bin	pkg	src</span><br></pre></td></tr></table></figure></p>
<p><code>bin</code>文件夹中包括<code>Go</code>编译生成到二进制执行文件，你需要将<code>bin</code>文件夹路径添加到你的系统路径中。<br><code>pkg</code>文件夹存放编译生成的对应编译版本的所有库文件使得编译器在不需要重新编译的情况下可以重新链接它们。<br>最后，<code>src</code>文件夹中按引入路径存放着所有<code>Go</code>源码,如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls <span class="variable">$GOPATH</span>/src</span><br><span class="line">bitbucket.org	code.google.com	github.com	launchpad.net</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls <span class="variable">$GOPATH</span>/src/github.com/mattetti</span><br><span class="line">goblin			goRailsYourself		jet</span><br></pre></td></tr></table></figure>
<p>当新建一个项目时，在<code>src</code>文件夹中推荐按照包引入路径来放置源码文件(如: <strong>github.com/<your username="">/<project name=""></project></your></strong>)</p>
<h2 id="u5BFC_u5165_u540D_u5B57"><a href="#u5BFC_u5165_u540D_u5B57" class="headerlink" title="导入名字"></a>导入名字</h2><p>导入一个包后，就可以通过名字来引用导入包中的内容（即在包外可以访问到它到变量，方法及函数等）,在<code>Go</code>中，如果名字首字母大写则这个名字，则这个名字可导入的，可以被导入到其它包中使用，即公有的。如<code>Foo</code>和<code>FOO</code>都是可导入的,而<code>foo</code>则不是可导入的，来看两者的不同:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">    fmt.Println(math.pi)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>和<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	fmt.Println(math.Pi)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Pi</code>是可以导入的，可以在包外被调用，是公有的，而<code>pi</code>则不可以，编译报错提示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cannot refer to unexported name math.pi</span><br></pre></td></tr></table></figure></p>
<h2 id="u51FD_u6570_u5F62_u53C2_u540D_2C_u8FD4_u56DE_u503C_uFF0C_u88AB_u547D_u540D_u7684_u8FD4_u56DE_u503C"><a href="#u51FD_u6570_u5F62_u53C2_u540D_2C_u8FD4_u56DE_u503C_uFF0C_u88AB_u547D_u540D_u7684_u8FD4_u56DE_u503C" class="headerlink" title="函数形参名,返回值，被命名的返回值"></a>函数形参名,返回值，被命名的返回值</h2><p>一个函数可以有零个或多个形参，也可以有多个返回值。在形参列表中类型放在形参变量的后面，如:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> add(x <span class="typename">int</span>, y <span class="typename">int</span>) <span class="typename">int</span> &#123;</span><br><span class="line">	    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	    fmt.Println(add(<span class="number">42</span>, <span class="number">13</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在下面的示例中，可以将多个类型相同的形参一起声明，如<code>x int, y int</code>可以写成<code>x, y int</code>，<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> add(x, y <span class="typename">int</span>) <span class="typename">int</span> &#123;</span><br><span class="line">	    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	    fmt.Println(add(<span class="number">42</span>, <span class="number">13</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面示例中，<code>location</code>函数返回两个<code>string</code>类型值。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> location(city <span class="typename">string</span>) (<span class="typename">string</span>, <span class="typename">string</span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> region <span class="typename">string</span></span><br><span class="line">		<span class="keyword">var</span> continent <span class="typename">string</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span> city &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"Los Angeles"</span>, <span class="string">"LA"</span>, <span class="string">"Santa Monica"</span>:</span><br><span class="line">			region, continent = <span class="string">"California"</span>, <span class="string">"North America"</span></span><br><span class="line">		<span class="keyword">case</span> <span class="string">"New York"</span>, <span class="string">"NYC"</span>:</span><br><span class="line">			region, continent = <span class="string">"New York"</span>, <span class="string">"North America"</span></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			region, continent = <span class="string">"Unknown"</span>, <span class="string">"Unknown"</span></span><br><span class="line">		&#125;</span><br><span class="line">			<span class="keyword">return</span> region, continent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">		region, continent := location(<span class="string">"Santa Monica"</span>)</span><br><span class="line">		fmt.Printf(<span class="string">"Matt lives in %s, %s"</span>, region, continent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>Go</code>语言中，函数可以返回多个值，如果返回参数被命名了，则返回语句可以不需要显示返回相应的返回参数，如：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> location(name, city <span class="typename">string</span>) (name, continent <span class="typename">string</span>) &#123;</span><br><span class="line">	<span class="keyword">switch</span> city &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"New York"</span>, <span class="string">"LA"</span>, <span class="string">"Chicago"</span>:</span><br><span class="line">			continent = <span class="string">"North America"</span></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			continent = <span class="string">"Unknown"</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">		name, continent := location(<span class="string">"Matt"</span>, <span class="string">"LA"</span>)</span><br><span class="line">		fmt.Printf(<span class="string">"%s lives in %s"</span>, name, continent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是个人推荐，无论返回参数是否被命名了，在返回语句中都显示加上被返回的参数名称</p>
<h2 id="u6307_u9488"><a href="#u6307_u9488" class="headerlink" title="指针"></a>指针</h2><p>在<code>Go</code>语言中有指针，但是没有指针运算。结构字段都可以通过一个结构指针进行访问。<code>Go</code>中指针就像透明的一样，可以用指针直接调用字段和方法。不过<code>Go</code>默认是按值传递参数（值拷贝），如果想通过引用传递参数，则需要传递指针（或使用<code>slice</code>和<code>map</code>等引用结构类型。可以在变量前面加<code>&amp;</code>符号取得这个变量的地址,在变量前面加<code>*</code>符号则可以取得这个变量的值。在<code>Go</code>中方法默认被定义为指针类型而不是值类型（不过方法也可以定义为值类型），通常可以将一个指针赋值给一个变量，如：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line">resp, err := client.Get(<span class="string">"http://gobootcamp.com"</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="u53EF_u53D8_u6027"><a href="#u53EF_u53D8_u6027" class="headerlink" title="可变性"></a>可变性</h2><p>在<code>Go</code>中，只有常量在初始化之后是不可改变的。但注意在<code>Go</code>函数中参数默认按值传递，在函数体内修改传入的参数值，并不会改变函数外这个参数的值，如：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Artist <span class="keyword">struct</span> &#123;</span><br><span class="line">		Name, Genre <span class="typename">string</span></span><br><span class="line">		Songs       <span class="typename">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> newRelease(a Artist) <span class="typename">int</span> &#123;</span><br><span class="line">		a.Songs++</span><br><span class="line">		<span class="keyword">return</span> a.Songs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">		me := Artist&#123;Name: <span class="string">"Matt"</span>, Genre: <span class="string">"Electro"</span>, Songs: <span class="number">42</span>&#125;</span><br><span class="line">		fmt.Printf(<span class="string">"%s released their %dth song\n"</span>, me.Name, newRelease(me))</span><br><span class="line">		fmt.Printf(<span class="string">"%s has a total of %d songs"</span>, me.Name, me.Songs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>results:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Matt released their <span class="number">43</span>th song</span><br><span class="line">Matt has a total of <span class="number">42</span> songs</span><br></pre></td></tr></table></figure></p>
<p>上面的结果并没有真正修改<code>me</code>变量中的值，是因为上述形参是通过值传递，如果要达到成功修改，则需要借助指针对<code>me</code>变量进行引用传递，如：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Artist <span class="keyword">struct</span> &#123;</span><br><span class="line">		Name, Genre <span class="typename">string</span></span><br><span class="line">		Songs       <span class="typename">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> newRelease(a *Artist) <span class="typename">int</span> &#123;</span><br><span class="line">		a.Songs++</span><br><span class="line">		<span class="keyword">return</span> a.Songs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">		me := &amp;Artist&#123;Name: <span class="string">"Matt"</span>, Genre: <span class="string">"Electro"</span>, Songs: <span class="number">42</span>&#125;</span><br><span class="line">		fmt.Printf(<span class="string">"%s released their %dth song\n"</span>, me.Name, newRelease(me))</span><br><span class="line">		fmt.Printf(<span class="string">"%s has a total of %d songs"</span>, me.Name, me.Songs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面两个版本中唯一对不同是第一个版本是值传递，只修改了拷贝不影响变量原值，而第二个版本是引用传递，修改的是同一地址上的内容，所以修改成功。</p>
<p><strong> 《GO BOOTCAMP》第二章翻译完成，原著第二章出处：<a href="http://www.golangbootcamp.com/book/basics" target="_blank" rel="external">Chapter 2 The Basics</a> </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;如果已经有一定的编程基础，那你只需花几个小时就能学会&lt;code&gt;Go&lt;/code&gt;编程，因此&lt;code&gt;Go&lt;/code&gt;也常被认为是一门“简单易用”的编程语言。Go语言被设计得尽量简洁，它的整个语言规范也一样。在写第一个&lt;code&gt;Go&lt;/code&gt;应用之前，我们先来学习&lt;code&gt;Go&lt;/code&gt;的一些基础概念。&lt;br&gt;
    
    </summary>
    
      <category term="go-bootcamp" scheme="http://www.grdtechs.com/categories/go-bootcamp/"/>
    
    
      <category term="golang" scheme="http://www.grdtechs.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>用Hexo+github搭建本站</title>
    <link href="http://www.grdtechs.com/2016/01/15/hexo-blog-1/"/>
    <id>http://www.grdtechs.com/2016/01/15/hexo-blog-1/</id>
    <published>2016-01-15T12:10:10.000Z</published>
    <updated>2016-07-27T03:15:13.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p><a href="https://hexo.io" target="_blank" rel="external">Hexo</a>是一个基于<code>Node.js</code>免费开源的静态博客框架，方便将生成的静态网页托管在<code>github</code>和<code>Heroku</code>上，可快速部署，并支持<code>Markdown</code>写作，这也是选择<code>Hexo</code>部署本站的理由。无特殊说明，本站所有操作均在<code>Mac OS</code>下完成。<br><a id="more"></a></p>
<h2 id="u642D_u5EFAHexo_u535A_u5BA2"><a href="#u642D_u5EFAHexo_u535A_u5BA2" class="headerlink" title="搭建Hexo博客"></a>搭建Hexo博客</h2><ul>
<li><p>安装<code>Node.js</code></p>
<pre><code>$ brew install node #该命令执行后，自动装好node和npm
$ brew upgrade node #更新node
</code></pre><p>安装完成后 我们测试一下 在任意目录下 创建js文件, 如helloworld.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">	res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">		res.end(<span class="string">'Hello World\n'</span>);</span><br><span class="line">	&#125;).listen(<span class="number">1337</span>, <span class="string">'127.0.0.1'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:1337/'</span>);</span><br></pre></td></tr></table></figure>
<p>  在终端进入该目录下 输入node helloworld.js<br>  在浏览器中输入 地址 <a href="http://127.0.0.1:1337/" target="_blank" rel="external">http://127.0.0.1:1337/</a> 查看结果 至此 NODEJS 运行环境已经配置好。</p>
</li>
<li><p>安装 <code>hexo</code></p>
<pre><code>$ npm install hexo-cli -g
</code></pre></li>
<li><p>创建本地博客</p>
<pre><code>$ hexo init blog #这里是在/Users/lihong/ 这个目录下执行这个目录
$ cd blog  #pwd 目录为: /Users/lihong/blog
$ npm install
$ hexo server
</code></pre><p>浏览器输入localhost:4000即可看到搭建的博客,此时只能本地访问，可通过部署到github上，使得在公网同样可以访问。</p>
</li>
<li><p>部署到<code>github</code>上<br>注册一个<code>github</code>账号，在自己<code>github</code>主页右下角，创建一个新的<code>repository</code>。例如我的github账号为<code>researchlab</code>,那么我应该创建的repository名字应该是<code>researchlab.github.io</code>。<br>编辑<code>_config.yml</code>(在<code>Users/lihong/blog</code>目录下)。你在部署时，要把下面的researchlab都换成你的账号名。(没有看到repository:, branch:等字段则加上即可）</p>
<pre><code>deploy:
type: git
repository: https://github.com/researchlab/researchlab.github.io.git
branch: master
</code></pre><p>回到/Users/lihong/blog目录下执行如下命令</p>
<pre><code>$ hexo generate #生成静态网页
$ hexo deploy #部署到github上
</code></pre><p>  <strong>记住:</strong> 每次修改本地文件后，需要hexo generate才能保存。每次使用命令时，都要在$pwd/blog目录下。现在可在浏览器访问<code>researchlab.github.io</code>看到我们到博客了。</p>
</li>
<li>Hexo常用命令<br>  <code>hexo g</code> == <code>hexo generate</code> #生成静态页面<br>  <code>hexo d</code> == <code>hexo deploy</code> #部署到远程服务器上（如本站部署到 github)<br>  <code>hexo s</code> == <code>hexo server</code> #启动本地服务器<br>  <code>hexo n</code> == <code>hexo new</code> #新建一篇文章或一个页面</li>
</ul>
<h2 id="u914D_u7F6EHexo_u535A_u5BA2"><a href="#u914D_u7F6EHexo_u535A_u5BA2" class="headerlink" title="配置Hexo博客"></a>配置Hexo博客</h2><p>Hexo站点配置用到两个文件，一个是对整站的配置<code>$pwd/blog/_config.yml</code>，另一个是对主题的配置 <code>$pwd/blog/themes/jacman/_config.yml</code>，我们来分别介绍。</p>
<ul>
<li><p>对整站的配置<code>$pwd/blog/_config.yml</code></p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="header"># Hexo Configuration</span></span><br><span class="line"><span class="header">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="header">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="header"># Site</span></span><br><span class="line">title: 朴实的一线码农 #站点名 站点左上角 </span><br><span class="line">subtitle: 十年磨一剑，一步一步脚踏实地的耕种 #站点副标题</span><br><span class="line">description: Leehong's Blog #给搜索引擎看的, 对站点的描述，可以自定义</span><br><span class="line">author: Lee Hong </span><br><span class="line">language: zh-CN #页面语言</span><br><span class="line">timezone:</span><br><span class="line"></span><br><span class="line"><span class="header"># URL</span></span><br><span class="line"><span class="header">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://www.grdtechs.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"><span class="header"># Directory #目录配置 默认即可</span></span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"><span class="header"># Writing 文章布局，写作格式定义 默认即可</span></span><br><span class="line">new<span class="emphasis">_post_</span>name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post<span class="emphasis">_asset_</span>folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"><span class="header"># Category &amp; Tag</span></span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"><span class="header"># Date / Time format 期日格式 默认即可</span></span><br><span class="line"><span class="header">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="header">## You can customize the date format as defined in</span></span><br><span class="line"><span class="header">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"><span class="header"># Pagination 每页显示的文章数目 默认每页显示10篇</span></span><br><span class="line"><span class="header">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"><span class="header"># Extensions</span></span><br><span class="line"><span class="header">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="header">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: jacman </span><br><span class="line"></span><br><span class="line"><span class="header"># Deployment 部署站点到github</span></span><br><span class="line"><span class="header">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git </span><br><span class="line">  repository: https://github.com/researchlab/researchlab.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
</li>
<li><p>对主题的配置 <code>$pwd/blog/themes/jacman/_config.yml</code></p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">##### Menu 站点右上角导航栏</span></span><br><span class="line">menu:</span><br><span class="line">  首页: /</span><br><span class="line">  归档: /archives</span><br><span class="line">  关于: /about</span><br><span class="line"><span class="header">## you can create `tags` and `categories` folders in `../source`.</span></span><br><span class="line"><span class="header">## And create a `index.md` file in each of them.</span></span><br><span class="line"><span class="header">## set `front-matter`as</span></span><br><span class="line"><span class="header">## layout: tags (or categories)</span></span><br><span class="line"><span class="header">## title: tags (or categories)</span></span><br><span class="line"><span class="header">## ---</span></span><br><span class="line"></span><br><span class="line"><span class="header">#### Widgets 站点右边栏</span></span><br><span class="line">widgets: </span><br><span class="line"><span class="code">    #- github-card</span></span><br><span class="line"><span class="bullet">- </span>intro</span><br><span class="line"><span class="bullet">- </span>category</span><br><span class="line"><span class="bullet">- </span>tag</span><br><span class="line"><span class="bullet">- </span>links</span><br><span class="line"><span class="bullet">- </span>douban</span><br><span class="line"><span class="bullet">- </span>rss</span><br><span class="line"><span class="bullet">- </span>weibo</span><br><span class="line">  ## provide eight widgets:github-card,category,tag,rss,archive,tagcloud,links,weibo</span><br><span class="line"></span><br><span class="line"><span class="header">#### RSS </span></span><br><span class="line">rss: /atom.xml ## RSS address.</span><br><span class="line"></span><br><span class="line"><span class="header">#### Image</span></span><br><span class="line">imglogo:</span><br><span class="line">  enable: true             ## display image logo true/false.</span><br><span class="line">  src: #img/logo.png        ## <span class="code">`.svg`</span> and <span class="code">`.png`</span> are recommended,please put image into the theme folder <span class="code">`/jacman/source/img`</span>.</span><br><span class="line">favicon: #img/favicon.ico   ## size:32px*32px,<span class="code">`.ico`</span> is recommended,please put image into the theme folder <span class="code">`/jacman/source/img`</span>.     </span><br><span class="line">apple_icon: #img/jacman.jpg ## size:114px*114px,please put image into the theme folder <span class="code">`/jacman/source/img`</span>.</span><br><span class="line">author_img: #img/author.jpg ## size:220px*220px.display author avatar picture.if don't want to display,please don't set this.</span><br><span class="line">banner_img: #img/banner.jpg ## size:1920px*200px+. Banner Picture</span><br><span class="line"><span class="header">### Theme Color </span></span><br><span class="line">theme_color:</span><br><span class="line"><span class="code">    theme: '#2ca6cb'    ##the defaut theme color is blue</span></span><br><span class="line"></span><br><span class="line"><span class="header"># 代码高亮主题</span></span><br><span class="line"><span class="header"># available: default | night</span></span><br><span class="line">highlight_theme: default</span><br><span class="line"></span><br><span class="line"><span class="header">#### index post is expanding or not </span></span><br><span class="line">index:</span><br><span class="line">  expand: true           ## default is unexpanding,so you can only see the short description of each post.</span><br><span class="line">  excerpt_link: Read More  </span><br><span class="line"></span><br><span class="line">close_aside: false  #close sidebar in post page if true</span><br><span class="line">mathjax: false      #enable mathjax if true</span><br><span class="line"></span><br><span class="line"><span class="header">### Creative Commons License Support, see http://creativecommons.org/ </span></span><br><span class="line"><span class="header">### you can choose: by , by-nc , by-nc-nd , by-nc-sa , by-nd , by-sa , zero</span></span><br><span class="line">creative_commons: none</span><br><span class="line"></span><br><span class="line"><span class="header">#### Toc</span></span><br><span class="line">toc:</span><br><span class="line">  article: true   ## show contents in article.</span><br><span class="line">  aside: true     ## show contents in aside.</span><br><span class="line"><span class="header">## you can set both of the value to true of neither of them.</span></span><br><span class="line"><span class="header">## if you don't want display contents in a specified post,you can modify `front-matter` and add `toc: false`.</span></span><br><span class="line"></span><br><span class="line"><span class="header">#### Links</span></span><br><span class="line">links:</span><br><span class="line">  Linux/c/c++: http://blog.csdn.net/xiaolongwang2010,小龙王2010csdn技术博客</span><br><span class="line"></span><br><span class="line"><span class="header">#### Comment 添加多说评论</span></span><br><span class="line">duoshuo_shortname: gamedp   ## e.g. Leehong   your duoshuo short name.</span><br><span class="line">disqus_shortname:     ## e.g. Leehong   your disqus short name.</span><br><span class="line"></span><br><span class="line"><span class="header">#### Share button</span></span><br><span class="line">jiathis:</span><br><span class="line">  enable: true ## if you use jiathis as your share tool,the built-in share tool won't be display.</span><br><span class="line">  id:  2084050  ## e.g. 2084050 your jiathis ID. </span><br><span class="line">  tsina: ## e.g. 2176287895 Your weibo id,It will be used in share button.</span><br><span class="line"></span><br><span class="line"><span class="header">#### Analytics</span></span><br><span class="line">google_analytics:</span><br><span class="line">  enable: false</span><br><span class="line">  id:        ## e.g. UA-46321946-2 your google analytics ID.</span><br><span class="line">  site:      ## e.g. Leehong.me your google analytics site or set the value as auto.</span><br><span class="line"><span class="header">## You MUST upgrade to Universal Analytics first!</span></span><br><span class="line"><span class="header">## https://developers.google.com/analytics/devguides/collection/upgrade/?hl=zh_CN</span></span><br><span class="line">baidu_tongji:</span><br><span class="line">  enable: true</span><br><span class="line">  sitecode: ## e.g. e6d1f421bbc9962127a50488f9ed37d1 your baidu tongji site code</span><br><span class="line">cnzz_tongji:</span><br><span class="line">  enable: false</span><br><span class="line">  siteid:    ## e.g. 1253575964 your cnzz tongji site id</span><br><span class="line"></span><br><span class="line"><span class="header">#### Miscellaneous</span></span><br><span class="line">ShowCustomFont: true  ## you can change custom font in <span class="code">`variable.styl`</span> and <span class="code">`font.styl`</span> which in the theme folder <span class="code">`/jacman/source/css`</span>.</span><br><span class="line">fancybox: true        ## if you use gallery post or want use fancybox please set the value to true.</span><br><span class="line">totop: true           ## if you want to scroll to top in every post set the value to true</span><br><span class="line"></span><br><span class="line"><span class="header">#### Custom Search</span></span><br><span class="line">google_cse: </span><br><span class="line">  enable: false</span><br><span class="line">  cx:   ## e.g. 018294693190868310296:abnhpuysycw your Custom Search ID.</span><br><span class="line"><span class="header">## https://www.google.com/cse/ </span></span><br><span class="line"><span class="header">## To enable the custom search You must create a "search" folder in '/source' and a "index.md" file</span></span><br><span class="line"><span class="header">## set the 'front-matter' as</span></span><br><span class="line"><span class="header">## layout: search </span></span><br><span class="line"><span class="header">## title: search</span></span><br><span class="line"><span class="header">## ---</span></span><br><span class="line">baidu_search:     ## http://zn.baidu.com/</span><br><span class="line">  enable: false</span><br><span class="line">  id:   ## e.g. "783281470518440642"  for your baidu search id</span><br><span class="line">  site: http://zhannei.baidu.com/cse/search  ## your can change to your site instead of the default site</span><br><span class="line">  </span><br><span class="line">tinysou_search:     ## http://tinysou.com/</span><br><span class="line">  enable: false</span><br><span class="line">  id:  ## e.g. "4ac092ad8d749fdc6293" for your tiny search id</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="u7528Hexo_u5199_u535A_u5BA2"><a href="#u7528Hexo_u5199_u535A_u5BA2" class="headerlink" title="用Hexo写博客"></a>用Hexo写博客</h2><p>站点配置好了之后，可通过执行如下命令开始写文章并发布</p>
<pre><code>$ hexo new &quot;the_first_post&quot; #在/Users/lihong/blog 目录下执行hexo new 命令
</code></pre><p>打开新建的<code>source/_posts/the_first_post.md</code>, 如下：<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="horizontal_rule">---</span></span><br><span class="line">title: the<span class="emphasis">_first_</span>post # 这个是文章的标题,可随意修改,如: 用Hexo+github搭建本站 </span><br><span class="line">date: 2016-01-15 12:10:10 #发表日期</span><br><span class="line">categories: Hexo #文章分类</span><br><span class="line">tags: [Hexo,Blog] #文章标签,多于一项时用这种格式</span><br><span class="line"><span class="header">description: </span><br><span class="line">---</span></span><br><span class="line"><span class="header"># 这里是正文</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--more--&gt;</span></span> #这后面的正文在首页不予以显示</span><br></pre></td></tr></table></figure></p>
<p>写好之后，执行<code>hexo g</code> 命令生成静态网页，执行<code>hexo s</code>启动本地服务器此时可通过localhost:4000在本地浏览器访问,执行<code>hexo d</code>部署到github上，则可通过公网访问了。</p>
<h2 id="u4F18_u5316Hexo_u535A_u5BA2"><a href="#u4F18_u5316Hexo_u535A_u5BA2" class="headerlink" title="优化Hexo博客"></a>优化Hexo博客</h2><ul>
<li><p>导航栏添加”关于”</p>
<ol>
<li><code>hexo new page &quot;about&quot;</code></li>
<li>到<code>source/about/index.md</code>编辑内容</li>
<li>在<code>themes/jacman/_config.yml</code>中,添加如下：<pre><code>menu:
    关于: /about
</code></pre></li>
</ol>
</li>
<li><p>添加RSS<br>hexo提供了RSS的生成插件，需要手动安装和设置。步骤如下：</p>
<ol>
<li>安装RSS插件到本地：<code>npm install hexo-generator-feed</code></li>
<li>开启RSS功能：编辑<code>$pwd/blog/_config.yml</code>，添加如下代码：<pre><code>plugins:
    - hexo-generator-feed
</code></pre></li>
<li>在<code>themes/jacman/_config.yml</code>中，编辑 <code>rss: /atom.xml</code><br><strong> 注意 </strong> 如果发现没有生成<code>atom.xml</code>, 可接着执行<code>npm install hexo-generator-feed --save</code>即可。</li>
</ol>
</li>
<li><p>添加sitemap<br>hexo也提供了sitemap到生成插件，与添加RSS插件类似。</p>
<ol>
<li>安装sitemap插件到本地：<code>npm install hexo-generator-sitemap</code></li>
<li><p>开启sitmap功能: 编辑<code>$pwd/blog/_config.yml</code>,添加如下代码：</p>
<pre><code>plugins:
    - hexo-generator-feed
    - hexo-generator-sitemap
</code></pre></li>
<li><p>访问researchlab.github.io/sitemap.xml即可看到站点地图。不过，sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，我们最好手动到google和百度等搜索引擎提交sitemap.xml。</p>
</li>
</ol>
</li>
<li><p>文章中插入图片<br>使用markdown写文章，插入图片的格式为<code>![图片名称](链接地址)</code>，这里要说的是链接地址怎么写。对于hexo，有两种方式：</p>
<ol>
<li>使用本地路径：在<code>$pwd/blog/source</code>目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为<code>/img/图片名称</code>。</li>
<li>使用微博图床，地址:<a href="http://weibotuchuang.sinaapp.com/" target="_blank" rel="external">http://weibotuchuang.sinaapp.com/</a>，将图片拖入区域中，会生成图片的URL，这就是链接地址。</li>
</ol>
</li>
</ul>
<h2 id="u95EE_u9898_u89E3_u51B3_u65B9_u6848"><a href="#u95EE_u9898_u89E3_u51B3_u65B9_u6848" class="headerlink" title="问题解决方案"></a>问题解决方案</h2><ol>
<li>执行<code>Hexo d</code> 出现<code>ERROR Deployer not found:git</code>,解决方案：<code>npm install hexo-deployer-git --save</code> 即可。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;是一个基于&lt;code&gt;Node.js&lt;/code&gt;免费开源的静态博客框架，方便将生成的静态网页托管在&lt;code&gt;github&lt;/code&gt;和&lt;code&gt;Heroku&lt;/code&gt;上，可快速部署，并支持&lt;code&gt;Markdown&lt;/code&gt;写作，这也是选择&lt;code&gt;Hexo&lt;/code&gt;部署本站的理由。无特殊说明，本站所有操作均在&lt;code&gt;Mac OS&lt;/code&gt;下完成。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.grdtechs.com/categories/Hexo/"/>
    
    
      <category term="Blog" scheme="http://www.grdtechs.com/tags/Blog/"/>
    
      <category term="Hexo" scheme="http://www.grdtechs.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
