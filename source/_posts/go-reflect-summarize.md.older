---
title: golang reflect使用总结
date: 2016-02-17 08:57:59
categories: golang
tags: [golang,reflect]
description:
---

## 前言
反射是一种检查存储在接口变量中的`<值,类型>`对的机制，通过go的reflect包提供的`reflect.TypeOf`和`reflect.ValueOf`可以方便的访问到一个接口值的`reflect.Type`和`reflect.Value`部分，从而可进一步得到这个接口的结构类型和对其进行值的修改操作。 
<!--more-->
## 反射的使用
1. 先定义个通用的结构体
```golang 
	type User struct{
		Id int
		Name string
		Age int
	}
```

2. 获取接口对象的字段,类型和方法信息
```golang
	func Info(o interface{}) {
		t := reflect.TypeOf(o)         //获取接口的类型
		fmt.Println("Type:", t.Name()) //t.Name() 获取接口的名称
		
		if t.Kind() != refelct.Struct { //通过Kind()来判断反射出的类型是否为需要的类型
			fmt.Println("err: type invalid!")		
			return
		}		

		v := reflect.ValueOf(o) //获取接口的值类型
		fmt.Println("Fields:")
				
		for i := 0; i < t.NumField(); i++ { //NumField取出这个接口所有的字段数量
		f := t.Field(i)                                   //取得结构体的第i个字段
		val := v.Field(i).Interface()                     //取得字段的值
		fmt.Printf("%6s: %v = %v\n", f.Name, f.Type, val) //第i个字段的名称,类型,值
		}

		for i := 0; i < t.NumMethod(); i++{
			m := t.Method(i)
			fmt.Printf("%6s: %v\n", m.Name,m.Type) //获取方法的名称和类型	   
		}
	}	
``` 

	获取接口对象的类型名称，通过`refelct.TypeOf()`获取接口对象的类型,并通过`Name()`方法获取接口的名称。
	获取对象中所有字段的名称,类型和值,通过`reflect.ValueOf()`获取接口对象的值类型取得字段的名称和类型,然后通过`v.Field(i).Interface()`取得第i个字段的值。
	可以通过`NumMethod()`获取获取接口对象所有方法的名称和类型。


3. 反射接口对象中的匿名或嵌入字段信息
先再添加一个Manager结构,User作为它的匿名字段

``` golang

	type Manager struct{
		User
		title string
	}

```

初始化Manager的两种方法：
```golang
	m0 := Manager{User: User{1,"Mike",11},title: "Man"}
	m1 := Manager{User{1,"Mike",11},"Man"} //这种初始化,赋值顺序必须和结构体中的声明顺序相同! 
```

现在如何来取出Manager中的匿名字段User？
```golang
	t := refelct.TypeOf(m)
	fmt.Printf("%#v\n", t.Field(0))
```
如上述代码，通过`t := refelct.TypeOf(m)`将Manager的字段类型取出来,在反射中对象字段是通过索引取到的，所以可通过`t.Field(0)`,
```bash
#reflect.StructField{Name:"User", PkgPath:"", Type:(*reflect.rtype)(0xedd20), Tag:"", Offset:0x0, Index:[]int{0}, Anonymous:true}
```

还可以通过`FieldByIndex`和`FieldByName`两种方法取得匿名结构体中的字段属性
1. 给`FieldByIndex()`传入一个int型的slice索引,如`FieldByIndex([]int{0,0})`即取得User结构体中的Id字段。
2. 通过`FieldByName("Id")`也可以取得User结构体中Id字段。

```bash
#reflect.StructField{Name:"Id", PkgPath:"", Type:(*reflect.rtype)(0xc08e0), Tag:"", Offset:0x0, Index:[]int{0, 0}, Anonymous:false}
```

## 通过反射修改对象

## 通过反射“动态”调用方法

## 小结
